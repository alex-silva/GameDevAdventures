<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// ID of door to spawn at
global.spawnDoor = -1;

// Starting stats
hearts = 5;     // Total health capacity
life = 5;       // Current health
coins = 100;

// Stats for currently equipped weapon
equippedWeapon = ItemGetRubbishSword();
equippedArmour = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// This alarm is triggered when objPlayerCharacter dies
//RestartGame();
instance_create(0, 0, objDeathScreen);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Reset/Free up things in the room that we don't want saved
with (parCollectible)
    {
    if (!placed)
        instance_destroy();
    }
with (objTemporary) instance_destroy();

// Put all things back where they started to avoid collision issues on return
with (all)
    {
    x = xstart;
    y = ystart;
    }

// Close all the doors
with (parDoor)
    image_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Make sure player exists!
if (!instance_exists(objPlayerCharacter))
    instance_create(0, 0, objPlayerCharacter);


// Move to outside the requested door
if (global.spawnDoor != -1)
    {
    // Get x position for the center of the door
    var sprite, offset, xoff;
    sprite = global.spawnDoor.sprite_index;
    xoff = sprite_get_xoffset(sprite);
    offset = (sprite_get_width(sprite)-xoff) / 2;
    
    // A blank door implies we are coming in from the south
    if (global.spawnDoor.object_index == objBlank)
        {
        objPlayerCharacter.x = global.spawnDoor.x+offset;
        objPlayerCharacter.y = global.spawnDoor.y-4;
        objPlayerCharacter.face = NORTH;
        }
    // Otherwise, we are coming in from the north
    else
        {
        objPlayerCharacter.x = global.spawnDoor.x+offset;
        objPlayerCharacter.y = global.spawnDoor.y+64;
        objPlayerCharacter.face = SOUTH;
        }
    // Disable player input until they press something again
    objPlayerCharacter.controlsAble = false;
    }


// Activate all "hidden" objects
instance_activate_object(objGrass);
instance_activate_object(objPot);
instance_activate_object(parMortal);

// Reset spawn door and player character variables
global.spawnDoor = -1;
with (objPlayerCharacter)
    {
    beenHit = false;         // Wether the character has been hit.
    staggerTimer = 0;        // Timer for when hit, (flashing, no-damage, no-input, etc)
    attacking = false;       // Currently performing an attack
    
    SetSpriteFromFace(spriteIdleNorth, spriteIdleSouth, spriteIdleEast, spriteIdleWest);
    
    // Put view in the new location
    view_xview[0] = floor(median(0, room_width-view_wview[0],  x-view_wview[0]/2));
    view_yview[0] = floor(median(0, room_height-view_hview[0], y-view_hview[0]/2));
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var _show = true;
_show &amp;= !instance_exists(objTransition);
with (parPauseMenu)
    _show &amp;= !visible;

if (_show)
    {
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fntHud);
    draw_set_color(c_white);
    
    // Draw the HUD (Heads Up Display)
    DrawLifeHearts(display_get_gui_width()-32, 48);
    DrawEquippedWeapon(48, 48);
    DrawCoinsCounter(96, 48);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
