<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Window sizes
width = 7*128;
height = 4*128;

global.autoFile = "yyrpg_auto.ini";
global.saveFile = "yyrpg_slot_1.ini";

selected = 0;

var _loadFile, _n;
for (_n=1; _n&lt;4; _n++)
    {
    // Defaults
    slotName[_n-1] = "SLOT "+string(_n);
    slotGems[_n-1] = -1;
    slotHearts[_n-1] = -1;
    slotLocation[_n-1] = -1;
    
    // Get file name for this slot
    _loadFile = "yyrpg_slot_"+string(_n)+".ini";
    slotFile[_n-1] = _loadFile;
    
    // If a file for this slot exists, get info from it
    if (file_exists(_loadFile))
        {
        ini_open(_loadFile);
        slotCharacter[_n-1] = ini_read_string("Player", "Character", "Boy");
        slotGems[_n-1] = ini_read_real("Player", "Gems", 0);
        slotLife[_n-1] = ini_read_real("Player", "Life", 5);
        slotHearts[_n-1] = ini_read_real("Player", "Hearts", 5);
        slotLocation[_n-1] = ini_read_string("Location", "Room", rmTownNew);
        ini_close();
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (instance_exists(objConfirmation))
    exit;

selected -= keyboard_check_pressed(vk_up)   &amp;&amp; selected&gt;0;
selected += keyboard_check_pressed(vk_down) &amp;&amp; selected&lt;3;

if (keyboard_check_pressed(ord("Z")))
|| (keyboard_check_pressed(ord("X")))
    {
    if (selected == 3)
        {
        room_goto(rmTitle);
        }
    else
        {
        global.saveFile = slotFile[selected];
        if (file_exists(global.saveFile))
            {
            var _confirmation = instance_create(0, 0, objConfirmation);
            _confirmation.message = "Are you sure you want to overwrite this save game?";
            _confirmation.exeYes = ConfirmSlot;
            }
        else
            {
            ConfirmSlot();
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_sprite_stretched(sprTitleSplash, 0, 0, 0, room_width, room_height);

// Work out position on screen (center)
var _xPos, _yPos, _icon;
_xPos = room_width*0.5-width*0.5;
_yPos = room_height*0.5-height*0.5;

// Draw Panel
DrawPanel(_xPos, _yPos, width, height, false, false);

// Header
draw_sprite(sprHeaderNewGame, 0, _xPos+width*0.5, _yPos+64);

var _loadFile, _n, _newSlot;
_y = _yPos-90;
for (_n=0; _n&lt;3; _n++)
    {
    DrawButton(string(slotName[_n]), _n==selected, _xPos+width*0.5-167-103-32, _y+height*0.5);
    draw_sprite(sprSaveGameSlot, _n==selected, _xPos+width*0.5-167, _y+height*0.5-37);
    draw_set_color(c_white);
    draw_set_font(fntInformation);
    
    // Draw empty slot
    if (slotGems[_n] == -1)
        {
        draw_set_halign(fa_center);
        draw_text(_xPos+width*0.5+32, _y+height*0.5, "Empty");
        }
    
    // Draw slot with loaded file information
    else
        {
        // Draw avatar
        switch (slotCharacter[_n])
            {
            case ("Boy"): draw_sprite(sprAvatarPlayerBoy, 0, _xPos+width*0.5-163, _y+height*0.5-33); break;
            case ("Girl"): draw_sprite(sprAvatarPlayerGirl, 0, _xPos+width*0.5-163, _y+height*0.5-33); break;
            default: 
            }
        
        // Location
        draw_set_halign(fa_left);
        draw_text(_xPos+width*0.5-85, _y+height*0.5-20, "Location:");
        draw_set_halign(fa_right);
        draw_text(_xPos+width*0.5+158, _y+height*0.5-20, string(LocationName(slotLocation[_n])));
        
        // Life/Hearts
        draw_set_halign(fa_left);
        draw_text(_xPos+width*0.5-85, _y+height*0.5, "Health:");
        for (_heart=0; _heart&lt;slotHearts[_n]; _heart++)
            draw_sprite(sprSaveSlotHeart, slotLife[_n]&lt;=_heart, _xPos+width*0.5+150-_heart*18, _y+height*0.5);
        
        // Gems
        draw_sprite(sprSaveSlotGem, 0, _xPos+width*0.5+150, _y+height*0.5+20);
        draw_set_halign(fa_left);
        draw_text(_xPos+width*0.5-85, _y+height*0.5+20, "Gems:");
        draw_set_halign(fa_right);
        draw_text(_xPos+width*0.5+130, _y+height*0.5+20, string(StringSepNumber(slotGems[_n])));
        }
    
    _y += 80;
    }

// Back button
DrawButton("Back", _n==selected, _xPos+width*0.5, _yPos+height-48);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
