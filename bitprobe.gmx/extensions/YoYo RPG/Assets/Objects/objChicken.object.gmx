<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprChickenWalkSouth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parMobile</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();


// Initial image settings
image_xscale = 1.0;
image_yscale = 1.0;


// Basic stats for the mob
life = 2;
mySpeed = 2;        // How fast this mob moves in pixels-per-step
docile = true;      // Whether this mob is docile (non-agressive)

face = SOUTH;
myLife = life;
paces = 0;
canMove = true;
horiSpeed = 0;
vertSpeed = 0;
state = STATE_IDLE;
idleTimer = 1*room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// If the game is paused, interrupt everything
if (instance_exists(objGame))
{
    if (objGame.isPaused)
        {
        image_index -= image_speed;
        exit;
        }
}

event_inherited();


// Handle collisions
if (canMove)
    MobileDoCollision(horiSpeed, vertSpeed, parObstacleFull);
    
    
//-----------------------------------------------------------------------------
// Simple AI
// This has to be after collision/movement code in order to pick up changes.
switch (state)
    {
    case (STATE_IDLE):
        idleTimer--;
        if (idleTimer &lt;= 0)
            state = STATE_TURN;
        break;
        
    case (STATE_TURN):
        if (irandom(1))
            horiSpeed = choose(-3, 3);
        else
            vertSpeed = choose(-3, 3);
        paces = irandom_range(50, 200);
        state = STATE_MOVE; 
        break;
        
    case (STATE_MOVE):
        paces--;
        if (x == xprevious)
        &amp;&amp; (y == yprevious)
        || (paces &lt;= 0)
            state = STATE_STOP;
        break;
        
    case (STATE_STOP):
        horiSpeed = 0;
        vertSpeed = 0;
        state = STATE_IDLE;
        idleTimer = 1*room_speed;
        break;
        
    case (STATE_STAGGER):
        staggerTimer--;
        image_blend = merge_color(c_white, c_red, lengthdir_x(1, staggerTimer*15));
        if (staggerTimer &lt;= 0)
            {
            image_blend = c_white;
            state = STATE_IDLE;
            beenHit = false;
            if (myLife &lt;= 0)
                hide = true;
            }
            
        // Do stagger
        switch (face)
            {
            case (NORTH): vertSpeed = staggerTimer/5; break;
            case (SOUTH): vertSpeed = staggerTimer/5; break;
            case (EAST):  horiSpeed = staggerTimer/5; break;
            case (WEST):  horiSpeed = staggerTimer/5; break;
            }
        break;
    }


//-----------------------------------------------------------------------------
// Sprite and animation management
if (vertSpeed &lt; 0) face = NORTH;
if (vertSpeed &gt; 0) face = SOUTH;
if (horiSpeed &gt; 0) face = EAST;
if (horiSpeed &lt; 0) face = WEST;
SetSpriteFromFace(sprChickenWalkNorth, sprChickenWalkSouth, sprChickenWalkEast, sprChickenWalkWest);

if (x != xprevious)
|| (y != yprevious)
    image_speed = 0.15;
else
    image_index = 0;
    
depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>33,66</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
