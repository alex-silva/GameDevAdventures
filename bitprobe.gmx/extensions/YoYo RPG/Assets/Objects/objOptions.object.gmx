<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>parPauseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Window sizes
width = 7*128;
height = 4*128;

onTitle = 0;
onSound = 1;
onMusic = 2;
onCloseButton = 4;

if (room == rmOptions)
    on = onSound;
else
    on = onTitle;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (visible)
    {
    // Toggle options on button press
    if (keyboard_check_pressed(ord("Z"))
    ||  keyboard_check_pressed(ord("X")))
        {
        switch (on)
            {
            case (onSound): global.enableAudio ^= true; break;
            case (onMusic): global.enableMusic ^= true; break;
            case (onCloseButton):
                if (room == rmOptions)
                    {
                    instance_destroy();
                    room_goto(rmTitle);
                    }
                else
                    {
                    visible = false;
                    }
                break;
            }
        
        // Save settings
        ini_open("yyrpg.ini");
        ini_write_real("settings", "audio", global.enableAudio);
        ini_write_real("settings", "music", global.enableMusic);
        ini_close();
        }
    
    if (keyboard_check_pressed(vk_left))
        {
        switch (on)
            {
            // Switch options of arrow keys
            case (onSound): global.enableAudio = false; break;
            case (onMusic): global.enableMusic = false; break;
            
            // Leave options for next screen
            case (onTitle):
                visible = false;
                objInventory.visible = true;
                break;
            }
        }
        
    if (keyboard_check_pressed(vk_right))
        {
        switch (on)
            {
            // Switch options of arrow keys
            case (onSound): global.enableAudio = true; break;
            case (onMusic): global.enableMusic = true; break;
            }
        }
    
    if (keyboard_check_pressed(vk_up))
        {
        switch (on)
            {
            case (onCloseButton): on = onMusic; break;
            case (onSound): if (room != rmOptions) on = onTitle; break;
            case (onMusic): on = onSound; break;
            }
        }
    
    if (keyboard_check_pressed(vk_down))
        {
        switch (on)
            {
            case (onTitle): on = onSound; break;
            case (onSound): on = onMusic; break;
            case (onMusic): on = onCloseButton; break;
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (room == rmOptions)
    visible = true;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (visible)
    {
    if (room == rmOptions)
        {
        draw_set_alpha(1.0);
        draw_sprite_stretched(sprTitleSplash, 0, 0, 0, room_width, room_height);
        }
    else
        {
        // Darken the screen to emphisize focus
        draw_set_color(c_black);
        draw_set_alpha(0.5);
        draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), false);
        }
    
    // Work out position on screen (center)
    var _xPos, _yPos, _seperation, _icon;
    _seperation = 48;
    _halfSep = _seperation/2;
    _xPos = display_get_gui_width()*0.5-width*0.5;
    _yPos = display_get_gui_height()*0.5-height*0.5;
    
    // Draw panel
    DrawPanel(_xPos, _yPos, width, height, true, room!=rmOptions);
    
    // Draw panel selection
    if (room == rmOptions)
        {
        // Header
        draw_sprite(sprHeaderOptions, 0, _xPos+width*0.5, _yPos+64);
        }
    else
        {
        // Header
        draw_sprite(sprHeaderOptions, 0, _xPos+width*0.5, _yPos+80);
        DrawButton("Inventory", 0,           _xPos+width*0.5,     _yPos);
        DrawButton("Save/Load", 0,           _xPos+width*0.5-206, _yPos);
        DrawButton("Options",   on==onTitle, _xPos+width*0.5+206, _yPos);
        }
    
    // Draw options
    DrawButton("Sound", on==onSound, _xPos+width*0.5-103, _yPos+height*0.5-40);
    draw_set_alpha(1.0);
    draw_sprite(sprToggleCross, !global.enableAudio, _xPos+width*0.5-103+127+37, _yPos+height*0.5-40);
    draw_sprite(sprToggleTick, global.enableAudio, _xPos+width*0.5-103+127+74+24+37, _yPos+height*0.5-40);
    
    DrawButton("Music", on==onMusic, _xPos+width*0.5-103, _yPos+height*0.5+40);
    draw_set_alpha(1.0);
    draw_sprite(sprToggleCross, !global.enableMusic, _xPos+width*0.5-103+127+37, _yPos+height*0.5+40);
    draw_sprite(sprToggleTick, global.enableMusic, _xPos+width*0.5-103+127+74+24+37, _yPos+height*0.5+40);
    
    // Draw the exit button
    DrawButton("Close", on==onCloseButton, _xPos+width*0.5, _yPos+height-48);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
