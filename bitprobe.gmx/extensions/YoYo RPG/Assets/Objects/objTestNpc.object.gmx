<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprNPCWalkSouth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parNpc</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
event_inherited();

// Default text (speech)
textPickRandomly = false;
text[0, 0] = "NO TEXT SET#Set in creation code of instance in room editor!";
type[0, 0] = 0;
response[0, 0] = "";
outcome[0, 0] = -1;

// Initial settings
SetAvatar("J. Doe", -1);
SetSpritesNPCMale();

// Basic stats for the mob, some of these are variable but can also be frozen
life = 2;           // How many hitpoints the mob has
mySpeed = 2;        // How fast this mob moves in pixels-per-step
docile = false;     // Whether this mob is docile (non-agressive)
canMove = true;     // Can this mob move at all
canTurn = true;     // If can't move, can atleast turn periodically
face = SOUTH;       // Initial facing direction, sense in use with "canTurn"

// Initial variables, these always change
myLife = life;              // Current hitpoints
paces = 0;                  // How far to walk before stopping
horiSpeed = 0;              // Horizontal movement speed
vertSpeed = 0;              // Vertical movement speed
state = STATE_IDLE;         // Current state, see step event for list and behaviour
idleTimer = 1*room_speed;   // How long to remain in the IDLE state

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// If the game is paused, interrupt everything
if (objGame.isPaused)
    {
    image_index -= image_speed;
    exit;
    }

event_inherited();


// Handle collisions
if (canMove)
    MobileDoCollision(horiSpeed, vertSpeed, parObstacleFull);
    
    
//-----------------------------------------------------------------------------
// Simple AI
// This has to be after collision/movement code in order to pick up changes.
if (!wait)
    {
    switch (state)
        {
        case (STATE_IDLE):
            idleTimer--;
            if (idleTimer &lt;= 0)
                state = STATE_TURN;
            break;
            
        case (STATE_TURN):
            if (canMove || canTurn)
                {
                if (irandom(1)) horiSpeed = choose(-2, 2);
                else            vertSpeed = choose(-2, 2);
                paces = irandom_range(40, 150);
                state = STATE_MOVE;
                }
            break;
            
        case (STATE_MOVE):
            paces--;
            if (x == xprevious)
            &amp;&amp; (y == yprevious)
            || (paces &lt;= 0)
                state = STATE_STOP;
            break;
            
        case (STATE_STOP):
            horiSpeed = 0;
            vertSpeed = 0;
            state = STATE_IDLE;
            idleTimer = floor(random_range(1.5, 3)*room_speed);
            break;
        }
    }

// Waiting
else
    {
    state = STATE_STOP;
    horiSpeed = 0;
    vertSpeed = 0;
    }


//-----------------------------------------------------------------------------
// Sprite and animation management
if (vertSpeed &lt; 0) face = NORTH;
if (vertSpeed &gt; 0) face = SOUTH;
if (horiSpeed &gt; 0) face = EAST;
if (horiSpeed &lt; 0) face = WEST;

// Moving
if (horiSpeed!=0 || vertSpeed!=0)
    {
    SetSpriteFromFace(spriteWalkNorth, spriteWalkSouth, spriteWalkEast, spriteWalkWest);
    image_speed = 0.15;
    }
else
    {
    SetSpriteFromFace(spriteIdleNorth, spriteIdleSouth, spriteIdleEast, spriteIdleWest);
    image_speed = 0.05;
    }

// Depth sorting
depth = -y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>33,66</point>
    <point>36,36</point>
  </PhysicsShapePoints>
</object>
