<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
DialogueSetDefaults();

inst = -1;
section = 0;
sentence = 0;
waitForResponse = false;
numberOfResponses = 0;
selectedResponse = 0;
previousSelection = 0;          // When navigating responses, this was the previous selection
selectionY = 0;
showPurchasedDialogue = false;  // Show item that we just purchased
purchasedItem = -1;
alignment = Alignment.top;

// Create a surface, used for simpler drawing of text (specifically cutting it off when scrolling)
textSurface = surface_create(512, 96);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
QuestUpdate();

// Always free your surfaces!
surface_free(textSurface);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (waitForResponse)
    {
    // Get direction we want to scroll (1 = down, -1 = up)
    var _move;
    _move = (1*keyboard_check_pressed(KEY_DOWN)) + (-1*keyboard_check_pressed(KEY_UP));
    
    // Do movement, also handle limiting movement so we don't move out of array
    if (_move != 0)
        {
        previousSelection = selectedResponse;
        selectedResponse = median(0, selectedResponse+_move, numberOfResponses-1);
        }
    
    // Handle item availability, and skipping over hidden items or restting selection
    while (true)
        {
        if (type[section, selectedResponse] == 0)
        || (type[section, selectedResponse] == 2)
        || (type[section, selectedResponse] == 3)
            break;
        _response = response[section, selectedResponse];
        _outcome = outcome[section, selectedResponse];
        _itemArray = script_execute(response[section, selectedResponse]);
        _itemLimit = -outcome[section, selectedResponse];
        if (!-_itemLimit)
        &amp;&amp; (InventoryFindNumberItem(_itemArray) &gt;= _itemLimit)
            {
            if (_move = 0)
                selectedResponse = 0;
            selectedResponse += _move;
            if (selectedResponse &gt;= numberOfResponses)
                {
                selectedResponse = previousSelection;
                break;
                }
            }
        else
            break;
        }
    }

if (keyboard_check_pressed(KEY_ACTION)
||  keyboard_check_pressed(KEY_ATTACK))
    {
    if (showPurchasedDialogue)
        showPurchasedDialogue = false;
    
    // Handle selection of response from the player
    else if (waitForResponse)
        {
        var _response, _outcome, _type;
        _response = response[section, selectedResponse];
        _outcome = outcome[section, selectedResponse];
        _type = type[section, selectedResponse];
        
        // If the selected option is a conversational response
        switch (_type)
            {
            case (0):
                Debug("Selected response "+string(selectedResponse)+": "+_response);
                Debug("Outcome of response is "+string(_outcome));
                DialogueHandleOutcome(_outcome);
                break;
                
            // Quest acceptance
            case (2):
                QuestInstanceAccept(inst);
                QuestUpdate();
                DialogueHandleOutcome(_outcome);
                break;
            
            // Quest decline
            case (3):
                DialogueHandleOutcome(_outcome);
                break;
                
            // If the selected option is a purchasable item
            case (1):
                // Get item data and the number purchased
                var _itemArray;
                _itemArray = script_execute(_response);
                purchasedItem = _itemArray;
                purchasedItem[ITEM_COUNT] = abs(_outcome);
                if (objPlayer.coins &gt;= purchasedItem[ITEM_VALUE]*abs(_outcome))
                    {
                    showPurchasedDialogue = true;                               // Show purchase dialogue
                    InventoryAdd(purchasedItem);                                // Add item to player's inventory
                    objPlayer.coins -= purchasedItem[ITEM_VALUE]*abs(_outcome); // Take the required gems from the player
                    PlaySound(snd_StorePositiveDing);
                    }
                else
                    PlaySound(snd_StoreNegativeDing);
                break;
            }
        }
    
    // NPC is stil talking, so pay attention!
    else
        {
        // If this is the last sentence in this chain
        if (++sentence &gt;= array_length_2d(text, section))
            {
            // If there is an oppotunity to respond
            var _respond;
            _respond = false;
            if (array_length_2d(response, section) &gt; 0)
                {
                Debug("Response index is within range...");
                if (string(response[section, 0]) != "")
                    {
                    _respond = true;
                    numberOfResponses = array_length_2d(response, section);
                    selectedResponse = 0;
                    waitForResponse = true;
                    Debug(string(numberOfResponses)+" responses found, WAITING FOR USER!");
                    sentence = 0;
                    }
                else if (outcome[section, 0] &gt;= 0)
                    {
                    var _outcome;
                    _outcome = outcome[section, 0];
                    sentence = 0;
                    _respond = true;
                    show_debug_message("BLANK RESPONSE, outcome: "+string(_outcome));
                    DialogueHandleOutcome(_outcome);
                    }
                }
            
            // Cannot respond
            if (!_respond)
                {
                Debug("No response to conversation, ENDING!");
                inst.wait = false;
                instance_destroy();
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
var _x, _y, _width, _height;
_width = 512;
_height = 96;
_x = display_get_gui_width()/2-_width/2;
_y = display_get_gui_height()-_height-64;

//-----------------------------------------------------------------------------
// Draw the avatar and name
draw_set_color($7FEFD9);    // BGR
draw_set_font(fntHud);
draw_set_halign(fa_left);
draw_sprite(sprDialogueBox, 0, _x, _y);

// Waiting for user response, show player
if (waitForResponse)
    {
    if (avatarSprite != -1) draw_sprite(objPlayerCharacter.avatarSprite, 0, _x+1, _y+1);
    if (name != "") draw_text(_x+64, _y+24, "You:");
    }

// NPC is talking, show avatar and name
else
    {
    if (avatarSprite != -1) draw_sprite(avatarSprite, 0, _x+1, _y+1);
    if (name != "") draw_text(_x+64, _y+24, name+":");
    }

// If there is no name, make sure text is drawn higher so it doesn't seem uncentered.
_y -= 16 * (name == "");


//-----------------------------------------------------------------------------
// Setup surface, and draw all the stuff to it
if (!surface_exists(textSurface))
    textSurface = surface_create(512, 96);
surface_set_target(textSurface);
draw_clear_alpha($000000, 0.0);

// General text settings
draw_set_alpha(1.0);
draw_set_halign(fa_left);
draw_set_valign(alignment);
draw_set_color(c_white);
draw_set_font(fntDialogue);

// Set position that text should start drawing according to alignment
switch (alignment)
    {
    case (Alignment.top)    : _textY = 8; break;
    case (Alignment.middle) : _textY = _height/2; break;
    case (Alignment.bottom) : _textY = _height-8; break;
    default                 : _textY = 0; break;
    }

// We just bought an item, show this information
var _text;
if (showPurchasedDialogue)
    {
    _text = "You've purchased "+string(purchasedItem[ITEM_COUNT])+" "+purchasedItem[ITEM_NAME];
    _text += "#- "+purchasedItem[ITEM_DESCRIPTION];
    draw_text_ext(64, _textY, _text, -1, _width-128);
    }
        
// Draw the player's potential responses
else if (waitForResponse)
    {
    var _textHeight, _runningHeight, _itemArray, _itemLimit, _addHeight;
    
    // Get the height of all the strings we need to display
    _runningHeight = 0;
    for (_index=0; _index&lt;numberOfResponses; _index++)
        {
        _text = "";
        _addHeight = 0;
        if (type[section, _index] == 0)
        || (type[section, _index] == 2)
        || (type[section, _index] == 3)
            {
            _text = response[section, _index];
            _addHeight = string_height_ext(_text, -1, _width-128)/2+4;
            }
        else
            {
            _itemArray = script_execute(response[section, _index]);
            _itemLimit = -outcome[section, _index];
            
            // If there is no item limit, or we are below that limit
            if (!_itemLimit)
            || (InventoryFindNumberItem(_itemArray) &lt; _itemLimit)
                {
                _text = _itemArray[ITEM_NAME];
                _addHeight = string_height_ext(_text, -1, _width-128)/2+4;
                }
            }
        _runningHeight += _addHeight;
        _textHeight[_index] = _runningHeight;
        _runningHeight += _addHeight;
        }
    
    // Draw items
    draw_set_valign(fa_middle);
    for (_index=0; _index&lt;numberOfResponses; _index++)
        {
        draw_set_color(merge_colour(c_gray, c_white, selectedResponse==_index));
        selectionY = lerp(selectionY, _textHeight[selectedResponse], 0.1);
        
        // This is a simple text response
        if (type[section, _index] == 0)
        || (type[section, _index] == 2)
        || (type[section, _index] == 3)
            {
            _text = response[section, _index];
            draw_text_ext(64, _height/2+_textHeight[_index]-selectionY, _text, -1, _width-128);
            }
        
        // This is an item for sale
        else
            {
            _itemArray = script_execute(response[section, _index]);
            _itemLimit = -outcome[section, _index];
            if (!_itemLimit)
            || (InventoryFindNumberItem(_itemArray) &lt; _itemLimit)
                {
                _text = _itemArray[ITEM_NAME];
                _number = abs(outcome[section, _index]);
                _icon = _itemArray[ITEM_ICON];
                draw_sprite_stretched(_icon, 0, 8+64, _height/2+_textHeight[_index]-selectionY-16, 32, 32);
                draw_text_transformed(40+64, _height/2+_textHeight[_index]-selectionY, "x"+string(_number), 0.75, 0.75, 0);
                
                // Draw cost
                var _color;
                draw_set_halign(fa_right);
                if (objPlayer.coins &lt; _itemArray[ITEM_VALUE]*_number) _color = c_red;
                else                                                  _color = c_lime;
                _cost = abs(_itemArray[ITEM_VALUE]*_number);
                draw_text_transformed_color(86+64+8, _height/2+_textHeight[_index]-selectionY, string(_cost)+"x", 0.75, 0.75, 0, _color, _color, _color, _color, 1);
                draw_sprite_ext(sprGreenGem, 0, 96+64+8, _height/2+_textHeight[_index]-selectionY+12, 0.75, 0.75, 0, c_white, 1.0);
                
                draw_set_halign(fa_left);
                draw_text_ext(128+64, _height/2+_textHeight[_index]-selectionY, _text, -1, _width-128);
                }
            }
        }
    }
    
// Draw the NPC text
else
    {
    draw_set_valign(alignment);
    _text = text[section, sentence];
    draw_text_ext(64, _textY, _text, -1, _width-128);
    }

surface_reset_target();


// Draw selection arrow (to indicate that user can move up and/or down)
if (waitForResponse &amp;&amp; numberOfResponses&gt;1)
    {
    if (selectedResponse &gt; 0) draw_sprite_ext(sprDialogueArrow, 0, _x+_width-64, _y+64-16, 1, -1, 0, c_white, 1.0);
    if (selectedResponse &lt; numberOfResponses-1) draw_sprite(sprDialogueArrow, 0, _x+_width-64, _y+64+16);
    }


//-----------------------------------------------------------------------------
// Draw the surface onto a primitive, so we can fade out the top and bottom edges
draw_primitive_begin_texture(pr_trianglestrip, surface_get_texture(textSurface));
draw_vertex_texture_colour(_x,        _y+32,            0.0, 0.0,   $FFFFFF, 0.0);
draw_vertex_texture_colour(_x+_width, _y+32,            1.0, 0.0,   $FFFFFF, 0.0);
draw_vertex_texture_colour(_x,        _y+32+16,         0.0, 16/96, $FFFFFF, 1.0);
draw_vertex_texture_colour(_x+_width, _y+32+16,         1.0, 16/96, $FFFFFF, 1.0);
draw_vertex_texture_colour(_x,        _y+32+_height-16, 0.0, 80/96, $FFFFFF, 1.0);
draw_vertex_texture_colour(_x+_width, _y+32+_height-16, 1.0, 80/96, $FFFFFF, 1.0);
draw_vertex_texture_colour(_x,        _y+32+_height,    0.0, 1.0,   $FFFFFF, 0.0);
draw_vertex_texture_colour(_x+_width, _y+32+_height,    1.0, 1.0,   $FFFFFF, 0.0);
draw_primitive_end();

// Reset drawing settings
draw_set_alpha(1.0);
draw_set_color(c_white);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
