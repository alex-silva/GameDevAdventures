<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Set this back to true, so we don't have weird looking scaled items
texture_set_interpolation(true);

buttonSelected = 0;
titleFade = 0.0;

global.character = "Boy";
global.loadGame = false;

show = 0;
state = "Tap";

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (state == "Tap")
    {
    // Fade in title
    if (titleFade &lt; 1.0)
        titleFade += 1.0/room_speed;
        
    // Continue on tap
    if (keyboard_check_pressed(ord("X")))
    || (keyboard_check_pressed(ord("Z")))
        state = "Menu";
    }
    
else
    {
    // Fade in title
    //if (titleFade &lt; 1.0)
        //titleFade += 1.0/room_speed;
    
    // Navigation
    if (keyboard_check_pressed(vk_down)) {buttonSelected++; PlaySound(snd_Select);}
    if (keyboard_check_pressed(vk_up))   {buttonSelected--; PlaySound(snd_Select);}
    if (buttonSelected &gt; 3) {buttonSelected = 0;}
    if (buttonSelected &lt; 0) {buttonSelected = 3;}
    
    // Select current button
    if (keyboard_check_pressed(ord("Z"))
    ||  keyboard_check_pressed(ord("X")))
        {
        switch (buttonSelected)
            {
            case (0): PlaySound(snd_Positive); room_goto_next(); break;
            case (1): PlaySound(snd_Positive); room_goto(rmLoadGame); break;
            case (2): room_goto(rmOptions); break;
            case (3): PlaySound(snd_Negative); game_end(); break;
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (state == "Tap")
    {
    var _xPos = room_width/2;
    var _yPos = room_height-64;
    
    draw_set_alpha(1.0);
    draw_sprite_stretched(sprTitleSplash, 0, 0, 0, room_width, room_height);
    draw_sprite_ext(sprTitleLogo, 0, _xPos, 100, 0.5, 0.5, 0, c_white, titleFade);
    
    show++;
    if (show &gt; 30)
        show = -30;
        
    if (show &gt; 0)
        draw_sprite(sprPressToStart, 0, _xPos, _yPos);
    }
    
else
    {
    var _xCenter = room_width/2;
    var _yCenter = room_height/2;
    
    draw_set_alpha(1.0);
    draw_sprite_stretched(sprTitleSplash, 0, 0, 0, room_width, room_height);
    draw_sprite_ext(sprTitleLogo, 0, _xCenter, 100, 0.5, 0.5, 0, c_white, titleFade);
    
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fntNotification);
    draw_set_alpha(titleFade);
    
    // Draw panel
    DrawPanel(_xCenter-192, _yCenter-64, 384, 256+64, false, false);
    
    // Draw buttons
    DrawButton("NEW GAME", buttonSelected==0, _xCenter, _yCenter+64*0);
    DrawButton("LOAD",     buttonSelected==1, _xCenter, _yCenter+64*1);
    DrawButton("OPTIONS",  buttonSelected==2, _xCenter, _yCenter+64*2);
    DrawButton("EXIT",     buttonSelected==3, _xCenter, _yCenter+64*3);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
