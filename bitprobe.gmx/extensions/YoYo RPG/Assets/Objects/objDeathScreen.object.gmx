<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parPauseMenu</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Window sizes
width = 7*128;
height = 4*128;

onContButton = 1;
onQuitButton = 2;
onLoadButton = 3;

on = onContButton;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (visible)
    {
    // Toggle options on button press
    if (keyboard_check_pressed(ord("Z"))
    ||  keyboard_check_pressed(ord("X")))
        {
        switch (on)
            {
            case (onContButton): EndGame(); global.loadFile = global.lastSaveGame; LoadGame(); break;
            case (onQuitButton): EndGame(); room_goto(rmTitle); break;
            case (onLoadButton): EndGame(); room_goto(rmLoadGame); break;
            }
        }
    
    if (keyboard_check_pressed(vk_up))
        {
        switch (on)
            {
            case (onLoadButton): on = onQuitButton; break;
            case (onQuitButton): on = onContButton; break;
            }
        }
    
    if (keyboard_check_pressed(vk_down))
        {
        switch (on)
            {
            case (onContButton): on = onQuitButton; break;
            case (onQuitButton): on = onLoadButton; break;
            }
        }
    }
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (visible)
    {
    // Darken the screen to emphisize focus
    draw_set_color(c_black);
    draw_set_alpha(0.5);
    draw_rectangle(0, 0, display_get_gui_width(), display_get_gui_height(), false);
    
    // Work out position on screen (center)
    var _xPos, _yPos;
    _xPos = display_get_gui_width()*0.5-width*0.5;
    _yPos = display_get_gui_height()*0.5-height*0.5;
    
    // Draw Panel
    DrawPanel(_xPos, _yPos, width, height, false, false);
    
    // Header
    draw_sprite(sprHeaderYouDied, 0, _xPos+width*0.5, _yPos+64);
    
    // Buttons
    DrawButtonLong("CONTINUE FROM LAST SAVE", on==onContButton, _xPos+width*0.5, _yPos+height*0.5-80);
    DrawButtonLong("QUIT TO MAIN MENU",       on==onQuitButton, _xPos+width*0.5, _yPos+height*0.5);
    DrawButtonLong("LOAD GAME",               on==onLoadButton, _xPos+width*0.5, _yPos+height*0.5+80);
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
