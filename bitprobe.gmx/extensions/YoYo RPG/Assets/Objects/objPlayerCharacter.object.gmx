<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerWalkSouth</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>parObstacle</parentName>
  <maskName>sprPlayerMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Basic stats for the character
mySpeed = 4;        // How fast the character will move


// Other control variables
beenHit = false;         // Wether the character has been hit.
staggerTimer = 0;        // Timer for when hit, (flashing, no-damage, no-input, etc)
face = SOUTH;            // Which way the character is facing
attacking = false;       // Currently performing an attack
controlsAble = true;     // Will the character will currently accept input
charging = false;
charge = 0;


// Change character sprites
switch (global.character)
    {
    case ("Boy"):      SetSpritesBoy();  break;
    case ("Girl"):     SetSpritesGirl(); break;
    case ("Scorpion"): SetSpritesScorpion(); break; // For LOLs, it works
    }

// First depth
depth = -y;

// Initialize view following
view_xview[0] = median(0, room_width-view_wview[0],  x-view_wview[0]/2);
view_yview[0] = median(0, room_height-view_hview[0], y-view_hview[0]/2);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//-----------------------------------------------------------------------------
// General states

// If the game is paused, interrupt everything
if (objGame.isPaused)
    {
    image_index -= image_speed;
    exit;
    }

// Movement interrupt
canMove = !attacking
       &amp;&amp; !charging
       &amp;&amp; !instance_exists(objDialogueBox);
       
// Allow movement but disable input in certain cases
if (staggerTimer &gt; 0)
    controlsAble = false;

// Restore controls on new keypress (ex; after moving through door)
else if (!controlsAble)
    {
    var newKey;
    newKey = keyboard_check_pressed(KEY_ACTION)
          || keyboard_check_pressed(KEY_ATTACK)
          || keyboard_check_direct(KEY_UP)
          || keyboard_check_direct(KEY_DOWN)
          || keyboard_check_direct(KEY_LEFT)
          || keyboard_check_direct(KEY_RIGHT);
    if (newKey)
        controlsAble = true;
    }


//-----------------------------------------------------------------------------
// Attacking
if (controlsAble)
    {
    var _pressed, _held;
    _pressed = keyboard_check_pressed(KEY_ATTACK);
    _released = keyboard_check_released(KEY_ATTACK);
    _held = keyboard_check(KEY_ATTACK);
    if (_pressed)
    &amp;&amp; (canMove)
        {
        // Flag that we are attacking, and set for how long
        attacking = true;
        spins = 1;
        SetSpriteFromFace(spriteAttackNorth, spriteAttackSouth, spriteAttackEast, spriteAttackWest);
        image_index = 0;
        image_speed = 0.4;
        canMove = false;
        charge = 0;
        charging = false;
        
        // Create collision mask for the attack
        var _newStrikeMask;
        _newStrikeMask = instance_create(x, y, objPlayerStrike);
        _newStrikeMask.face = face;
        _newStrikeMask.spins = spins;
        _newStrikeMask.depth = depth;
        _newStrikeMask.image_speed = image_speed;
        with (_newStrikeMask)
            {
            var _weapon;
            _weapon = script_execute(objPlayer.equippedWeapon[ITEM_SPRITESET]);
            SetSpriteFromFace(_weapon);
            }
        }
        
    if (_held) &amp;&amp; (_pressed || charging)
        {
        charging = true;
        //show_debug_message("Charging: "+string(charge));
        if (charge++ &gt;= 45)
            {
            attacking = true;
            spins = 2;
            sprite_index = sprBoyAttackSpecial;
            image_speed = 0.25;
            
            var _newStrikeMask;
            _newStrikeMask = instance_create(x, y, objPlayerStrike);
            _newStrikeMask.face = face;
            _newStrikeMask.spins = spins;
            _newStrikeMask.depth = depth;
            _newStrikeMask.image_speed = image_speed;
            _newStrikeMask.sprite_index = sprBoyAttackSpecial;
            _newStrikeMask.visible = false;
            _newStrikeMask.bonusDamage = 1;
            
            charging = false;
            }
        }
        
    // If we were charging, but have released
    else if (_released) &amp;&amp; (charging)
        {
        charging = false;
        charge = 0;
        }
    }


//-----------------------------------------------------------------------------
// Action
_pressed = keyboard_check_pressed(KEY_ACTION) &amp;&amp; controlsAble;
if (_pressed)
&amp;&amp; (canMove)
    {
    // Find item we are looking at depending on direction
    var foundInst;
    foundInst = GetInstanceFromFace(parInteract);
    if (foundInst != noone)
        {
        switch (foundInst.object_index)
            {
            case (objChest):
                foundInst.image_speed = 0.1;
                break;
            case (objSign):
                ShowDialogue(foundInst);
                break;
            }
        }
        
    // Didn't find item. Try and find NPC.
    else
        {
        foundInst = GetInstanceFromFace(parNpc);
        if (foundInst != noone)
            {
            ShowDialogue(foundInst);
            foundInst.face = GetOppositeDirection(face);
            foundInst.wait = true;
            }
        }
    }


//-----------------------------------------------------------------------------
// Get input
var h_spd, v_spd;
h_spd = 0;
v_spd = 0;
if (canMove)
&amp;&amp; (controlsAble)
    {
    h_spd +=(keyboard_check(KEY_RIGHT)-keyboard_check(KEY_LEFT)) * mySpeed;
    v_spd +=(keyboard_check(KEY_DOWN)-keyboard_check(KEY_UP)) * mySpeed;
    if (keyboard_check(KEY_UP))    {face = NORTH;}
    if (keyboard_check(KEY_DOWN))  {face = SOUTH;}
    if (keyboard_check(KEY_RIGHT)) {face = EAST;}
    if (keyboard_check(KEY_LEFT))  {face = WEST;}
    }
    

//-----------------------------------------------------------------------------
// Death
if (instance_exists(objPlayer))
    {
    if (objPlayer.life &lt;= 0)
        {
        PlaySound(snd_Death);
        objPlayer.alarm[0] = room_speed*2;
        
        var _n, _x, _y;
        for (_n=0; _n&lt;sprite_get_number(spriteDeathBits); _n++)
            {
            _x = x+lengthdir_x(16+random(32), random(360));
            _y = y+lengthdir_y(16+random(32), random(360));
            _newItem = instance_create(x, y, objNewObject);
            _newItem.sprite_index = spriteDeathBits;
            _newItem.image_index = _n;
            _newItem.destX = _x;
            _newItem.destY = _y;
            _newItem.despawn = false;
            }
        
        instance_destroy();
        }
    }


//-----------------------------------------------------------------------------
// Stagger. + Recover from stagger.
// When hit by an enemy, the character staggers, here we return to normal.
if (staggerTimer &gt; 0)
    {
    // Recovery
    staggerTimer--;
    if (staggerTimer == 0)
        beenHit = false;
        
    // Do stagger
    switch (face)
        {
        case (NORTH): v_spd += staggerTimer/5; break;
        case (SOUTH): v_spd -= staggerTimer/5; break;
        case (EAST):  h_spd -= staggerTimer/5; break;
        case (WEST):  h_spd += staggerTimer/5; break;
        }
    }


//-----------------------------------------------------------------------------
// Hit by enemy.
var _enemy;
_enemy = instance_place(x+h_spd, y+v_spd, parEnemy);
if (_enemy != noone)
    {
    // If not already hit, take damage and stagger
    if (!beenHit)
        {
        objPlayer.life--;
        beenHit = true;
        staggerTimer = 0.5*room_speed;
        show_debug_message("Hit by enemy: "+string(object_get_name(_enemy.object_index)));
        }
    }


//-----------------------------------------------------------------------------
// Handle collisions and movement
// Remember, because we handle collisions here, instances of parObstacle won't trigger collision events
if (canMove)
    MobileDoCollision(h_spd, v_spd, parObstacle);


//-----------------------------------------------------------------------------
// Sprite and animation management (Idle and movement, see above for attacking)

// Set default animation speed if not attacking
if (!attacking)
    {
    if (beenHit)
        {
        image_speed = 0.4;
        SetSpriteFromFace(spriteStaggerNorth, spriteStaggerSouth, spriteStaggerEast, spriteStaggerWest);
        }

    // Moving
    else if (h_spd!=0 || v_spd!=0)
        {
        image_speed = 0.15;
        SetSpriteFromFace(spriteWalkNorth, spriteWalkSouth, spriteWalkEast, spriteWalkWest);
        }
    
    // Idle
    else if (!attacking)
        {
        image_speed = 0.05;
        SetSpriteFromFace(spriteIdleNorth, spriteIdleSouth, spriteIdleEast, spriteIdleWest);
        }
    }

// Simple depth sorting, and lock player to interger position
x = floor(x);
y = floor(y);
depth = -y;


// View following
view_xview[0] = floor(median(0, room_width-view_wview[0],  x-view_wview[0]/2));
view_yview[0] = floor(median(0, room_height-view_hview[0], y-view_hview[0]/2));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="parDoor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
// Open the door
// It's effect is triggered at the end of it's animation
if (!objGame.isPaused)
    {
    with (other)
        image_speed = 0.2;
    }


// Lock controls
// So that you can't constantly walk through doors by holding UP
controlsAble = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objLifeHeart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (objPlayer.life &lt; objPlayer.hearts)
    {
    objPlayer.life++;
    PlaySound(snd_HeartGet);
    with (other)
        instance_destroy();
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPurpleGem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
objPlayer.coins += 100;

PlaySound(snd_CoinCollect);

with (other)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlueGem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
objPlayer.coins += 10;

PlaySound(snd_CoinCollect);

with (other)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objGreenGem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
objPlayer.coins += 1;

PlaySound(snd_CoinCollect);

with (other)
    instance_destroy();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (attacking)
    {
    spins -= 1;
    if (spins &lt;= 0)
        attacking = false;
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,48</point>
    <point>24,24</point>
  </PhysicsShapePoints>
</object>
