<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Coordenadas e tamanhos dos elementos
//------------------------------------
//-----------TOUCH CONTROL------------
//------------------------------------
//Posição esquerda do controle
gui_x[0] = 150;
gui_y[0] = (display_get_gui_height() - 100); 
//Posição direita do controle
gui_x[1] = (display_get_gui_width() - (sprite_get_width(sprButtonJump)/2) - 100 ); 
gui_y[1] = (display_get_gui_height() - (sprite_get_height(sprButtonJump)/2) - 100); 
//Gap entre botão esquerdo e direito
gap = 96;
//Posição botões lado esquerdo 
kleft_x = gui_x[0]-sprite_get_width(sprButtonLeft)/2-gap/2;
kleft_y = gui_y[0]-sprite_get_height(sprButtonLeft)/2;
kright_x = gui_x[0]+sprite_get_width(sprButtonRight)/2+gap/2;
kright_y = gui_y[0]-sprite_get_height(sprButtonRight)/2;
//Posição botões lado direito
kjump_x = gui_x[1];
kjump_y = gui_y[1];
kpause_x = gui_x[1]+ sprite_get_width(sprButtonJump)/2 - sprite_get_width(sprPause)/2;
kpause_y = 20;
kred_x = gui_x[1]-sprite_get_width(sprButtonJump);
kred_y = gui_y[1]+(sprite_get_height(sprButtonJump)/2)-sprite_get_height(sprButtonRed)/2;
kgreen_x = gui_x[1]-sprite_get_width(sprButtonGreen);
kgreen_y = gui_y[1]-sprite_get_height(sprButtonGreen);
kblue_x = gui_x[1]+(sprite_get_height(sprButtonJump)/2)-sprite_get_width(sprButtonBlue)/2;
kblue_y = gui_y[1]-sprite_get_height(sprButtonJump);

//Distância vetorial entre botões left right (centro entre eles).
//Esse cálculo serve para o centro entre botões left e right sejam preenchidos com virtual_keys lef e right. Missão cumprida Alexandre!
gap_lr = abs((kright_x-(kleft_x+sprite_get_width(sprButtonLeft)))/2);

//[Mapeamento Touch]
//Virtual keys lado esquerdo
kleft = virtual_key_add(0, kleft_y,sprite_get_width(sprButtonLeft)+gap_lr+kleft_x,sprite_get_height(sprButtonLeft), vk_left);
kright = virtual_key_add(kright_x-gap_lr, kright_y, sprite_get_width(sprButtonRight)+gap_lr+ sprite_get_width(sprButtonRight)/2,sprite_get_height(sprButtonRight), vk_right);
//Virtual keys lado direito
kjump = virtual_key_add(kjump_x, kjump_y,sprite_get_width(sprButtonJump) ,sprite_get_height(sprButtonJump), vk_space);
kpause = virtual_key_add(kpause_x, kpause_y,sprite_get_width(sprPause),sprite_get_height(sprPause), vk_escape);
kred = virtual_key_add(kred_x, kred_y,sprite_get_width(sprButtonRed) ,sprite_get_height(sprButtonRed), ord('1'));
kgreen = virtual_key_add(kgreen_x, kgreen_y,sprite_get_width(sprButtonGreen) ,sprite_get_height(sprButtonGreen), ord('2'));
kblue = virtual_key_add(kblue_x, kblue_y,sprite_get_width(sprButtonBlue) ,sprite_get_height(sprButtonBlue), ord('3'));

//está em modo tutorial de movimento
tutorialMov = false;
//está em modo tutorial de pulo
tutorialPulo = false;
//está em modo tutorial de cor - Red
tutorialRed = false;
//está em modo tutorial de cor - Blue
tutorialBlue = false;
//está em modo tutorial de cor - Green
tutorialGreen = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inserção dos sprites na tela

draw_sprite(sprButtonLeft,0,kleft_x, kleft_y);
draw_sprite(sprButtonRight,0,kright_x, kright_y);
draw_sprite(sprButtonJump,0,kjump_x, kjump_y);
draw_sprite(sprPause,0,kpause_x, kpause_y);

var corPlayer = Cor.White
if (instance_exists(objPlayer))
    corPlayer = objPlayer.cor;
if(global.playerStats[? "PlayerRed"])
{
    if (corPlayer = Cor.Red)
        draw_sprite(sprButtonRedDown,0,kred_x, kred_y);
    else
        draw_sprite(sprButtonRed,0,kred_x, kred_y);
}
if(global.playerStats[? "PlayerGreen"])
{
    if (corPlayer = Cor.Green)
        draw_sprite(sprButtonGreenDown,0,kgreen_x, kgreen_y);
    else
        draw_sprite(sprButtonGreen,0,kgreen_x, kgreen_y);
}
if(global.playerStats[? "PlayerBlue"])
{
    if (corPlayer = Cor.Blue)
        draw_sprite(sprButtonBlueDown,0,kblue_x, kblue_y);
    else
        draw_sprite(sprButtonBlue,0,kblue_x, kblue_y);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
