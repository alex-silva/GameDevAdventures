<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerWhiteMove</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis do player
gui_x[0] = 150;
gui_y[0] = (display_get_gui_height() - 150); 
gui_x[1] = (display_get_gui_width() - 150); 
gui_y[1] = (display_get_gui_height() - 150); 
stick_x[0] = gui_x[0]; 
stick_y[0] = gui_y[0]; 
stick_x[1] = gui_x[1]; 
stick_y[1] = gui_y[1]; 
st_pressed[0] = -1; 
st_pressed[1] = -1; 
st_radius = 80; 
vdir = 0;
stick_offset=40;
stick_direction = point_direction(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
stick_distance = point_distance(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);

//virtual_key_add(gui_x[0],gui_y[0],64,64,vk_left);
//virtual_key_add(gui_x[0]+64,gui_y[0],64,64,vk_right);

global.playerVivo = true;



cor = Cor.White

playerGravity = 0.75;
horizontalSpeed = 0;
verticalSpeed = 0;
jumpSpeed = 12;
jumpSpeedPadrao = 12;
moveSpeed = 7;
//variáveis que permitem que player siga moving barriers
//quando estiver acima das mesmas
hspCarry = 0;
verCarry = 0;

image_speed = 0.3;
global.playerDirection = Direction.Right;
TrocaSpritePlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recomeça nível, "matando" player, mas não destruímos a instância
global.playerVivo = true;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define velocidade e colisões com paredes
if (global.pause)
{
    image_index = 0;
    exit;
}

//##########################################################################
//Analog Stick
stick_x[0] = gui_x[0];
stick_y[0] = gui_y[0];
stick_x[1] = gui_x[1];
stick_y[1] = gui_y[1];
if st_pressed[0] = -1
   {
   for (i = 0; i &lt; 5; i++;)
      {
      if device_mouse_check_button(i, mb_left)
         {
         var tx, ty;
         tx = scr_mouse_gui_x(device_mouse_raw_x(i));
         ty = scr_mouse_gui_y(device_mouse_raw_y(i));
         if point_distance(tx, ty, gui_x[0], gui_y[0]) &lt; st_radius+300
            {
            if st_pressed[1] != i                {
               st_pressed[0] = i;
               break;
               }            
               }
         }
      }
   }
if device_mouse_check_button(st_pressed[0], mb_left)
   {
   var spd, vdist, mx, my;
   mx = scr_mouse_gui_x(device_mouse_raw_x(st_pressed[0]));
   my = scr_mouse_gui_y(device_mouse_raw_y(st_pressed[0]));

   vdist = min(st_radius, point_distance(mx, my, gui_x[0], gui_y[0]));
   vdir = point_direction(gui_x[0], gui_y[0], mx, my);


   //spd = min(b_spd, vdist / 10);
   //h_spd = lengthdir_x(spd, vdir);
   //v_spd = lengthdir_y(spd, vdir);

   stick_x[0] = gui_x[0] + lengthdir_x(vdist, vdir);
   stick_y[0] = gui_y[0] + lengthdir_y(vdist, vdir);
   }
else st_pressed[0] = -1

//stick de mudança de cor
if st_pressed[1] = -1
   {
   for (i = 0; i &lt; 5; i++;)
      {
      if device_mouse_check_button(i, mb_left)
         {
         var tx, ty;
         tx = scr_mouse_gui_x(device_mouse_raw_x(i));
         ty = scr_mouse_gui_y(device_mouse_raw_y(i));
         if point_distance(tx, ty, gui_x[1], gui_y[1]) &lt; st_radius +300
            {
            if st_pressed[0] != i                {
               st_pressed[1] = i;
               break;
               }             }
         }
      }
   }
if device_mouse_check_button(st_pressed[1], mb_left)
   {
   var spd, vdist, mx, my;
   mx = scr_mouse_gui_x(device_mouse_raw_x(st_pressed[1]));
   my = scr_mouse_gui_y(device_mouse_raw_y(st_pressed[1]));

   vdist = min(st_radius, point_distance(mx, my, gui_x[1], gui_y[1]));
   vdir = point_direction(gui_x[1], gui_y[1], mx, my);


   //spd = min(b_spd, vdist / 10);
   //h_spd = lengthdir_x(spd, vdir);
   //v_spd = lengthdir_y(spd, vdir);

   stick_x[1] = gui_x[1] + lengthdir_x(vdist, vdir);
   stick_y[1] = gui_y[1] + lengthdir_y(vdist, vdir);
   }
else st_pressed[1] = -1
   
   
// player visível apenas quando vivo
visible = global.playerVivo;

if (global.playerVivo)
{
   // Define movimentação
    move = KEY_RIGHT + KEY_LEFT;
    
    // Define movimentação por stick
    stick_direction = point_direction(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
    stick_distance = point_distance(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
    
    if (stick_distance &gt; stick_offset){
        if (stick_direction &gt;= 300 ||  stick_direction &lt;= 60)
            move = 1;
        else if (stick_direction &gt;= 120 &amp;&amp;  stick_direction &lt;= 240)
            move = -1;
    }    
    horizontalSpeed = move * moveSpeed;
    
    // faz personagem cair gradativamente
    if (verticalSpeed &lt; 100) 
        verticalSpeed += playerGravity + 0.1;
    
    // pula mais alto se tocar em propulsor, pular normal se tocar em floor
    if (place_meeting(x, y + 1, objPropulsor)
      || place_meeting(x, y + 1, objFloor))
    {
        if ((stick_distance &gt; stick_offset)|| KEY_JUMP){
            if ((stick_direction &gt; 20 &amp;&amp;  stick_direction &lt; 160) || KEY_JUMP)
            {
            //(display_get_gui_height() - 100))
                verticalSpeed = -jumpSpeed;
                if (jumpSpeed == jumpSpeedPadrao)
                    PlaySound(sndJump, false);
                else
                    PlaySound(sndBoost, false);
            }
            else
            {
                //som do step do player, se estiver movimentando-se
                if (move != 0 &amp;&amp; !audio_is_playing(sndStep1))
                    PlaySound(sndStep1, false);
                verticalSpeed = 0;
            }
        }
        
    }
    // retorna velocidade de pulo ao normal após utilizar propulsor
    if !(place_meeting(x, y + 1, objPropulsor))
        jumpSpeed = jumpSpeedPadrao;

    //mantém personagem acima da barrier
    var hspFinal = horizontalSpeed + hspCarry;
    hspCarry = 0;
    
    //Colisão Horizontal com floor
    if (place_meeting(x + hspFinal, y, objFloor))
    {
        while(!place_meeting(x + sign(hspFinal), y, objFloor))
        {
            x += sign(hspFinal);
        }
        hspFinal = 0;
        horizontalSpeed = 0;
    }
    
    //Colisão vertical com floor
    if (place_meeting(x, y + verticalSpeed, objFloor))
    {
        while(!place_meeting(x, y + sign(verticalSpeed), objFloor))
        {
            y += sign(verticalSpeed);
        }
        verticalSpeed = 0;
    }
    
    // Define movimentação caso não colida com objetos (ou não esteja em barrier vertical)
    x += hspFinal;    
    if (verCarry == 0 || KEY_JUMP)
        y += verticalSpeed;
    
    //Anima sprite
    if (horizontalSpeed &gt; 0)
    {
        if verticalSpeed &lt; 0
            global.playerDirection = Direction.JumpRight;      
        else if verticalSpeed &gt;= 0 
            global.playerDirection = Direction.Right;
    }
    else if horizontalSpeed &lt; 0
    {
        if verticalSpeed &lt; 0
           global.playerDirection = Direction.JumpLeft;
        else if verticalSpeed &gt;= 0 
           global.playerDirection = Direction.Left
    }
    else image_index = 0;
    
    //verifica se trocou de cor pelo stick
    stick_direction = point_direction(gui_x[1], gui_y[1], stick_x[1], stick_y[1]);
    stick_distance = point_distance(gui_x[1], gui_y[1], stick_x[1], stick_y[1]);
    if (stick_distance &gt; stick_offset){
        if (stick_direction &gt; 150 &amp;&amp;  stick_direction &lt; 270)
        {
            if(global.playerStats[? "PlayerRed"])
                self.cor = Cor.Red;
        }
        else if (stick_direction &lt; 30 ||  stick_direction &gt;= 270)
        {
            if(global.playerStats[? "PlayerBlue"])
                self.cor = Cor.Blue;
        }
        else if (stick_direction &gt;= 30 &amp;&amp;  stick_direction &lt;= 150)
            if(global.playerStats[? "PlayerGreen"])
                self.cor = Cor.Green;    
    }
    TrocaSpritePlayer();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTrojan">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com boss, restarta room
if (global.playerVivo)
    if (scrCollisionCor(cor, other.cor))
        scrCollisionDeath();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPowerUp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Habilita alternancia de cor
switch(other.cor)
{
    case Cor.Red   : { global.playerStats[? "PlayerRed"] = true; cor = Cor.Red;   break; }
    case Cor.Green : { global.playerStats[? "PlayerGreen"] = true; cor = Cor.Green; break; }
    case Cor.Blue  : { global.playerStats[? "PlayerBlue"]  = true; cor = Cor.Blue;  break; }
    case Cor.White : { global.playerStats[? "PlayerWhite"] = true; cor = Cor.White; break; }
}
sprite_index = TrocaSpritePlayer();
with (other) instance_destroy();
PlaySound(sndPowerUp,false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDoorEnd">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vai para próximo level
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSpike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com spike
if (global.playerVivo)
    if (scrCollisionCor(cor, other.cor))
         scrCollisionDeath();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objFloor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fazer algo interessante quando a cor for a mesma
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSphere">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com sphere e teletransporta
if (scrCollisionCor(self.cor, other.cor) &amp;&amp; other.portalDestino != 999)
{
    x = objRoom.portais[other.portalDestino].x;
    y = objRoom.portais[other.portalDestino].y + sprite_get_height(other.sprite_index)/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.75);
draw_circle_color(gui_x[0], gui_y[0], st_radius, c_lime, c_lime, true);
draw_circle_color(stick_x[0], stick_y[0], 20, c_lime, c_lime, true);
draw_circle_color(gui_x[1], gui_y[1], st_radius, c_lime, c_lime, true);
draw_circle_color(stick_x[1], stick_y[1], 20, c_lime, c_lime, true);
draw_set_alpha(0.25);
draw_circle_color(gui_x[0], gui_y[0], st_radius, c_lime, c_lime, false);
draw_circle_color(stick_x[0], stick_y[0], 20, c_lime, c_lime, false);
draw_circle_color(gui_x[1], gui_y[1], st_radius, c_lime, c_lime, false);
draw_circle_color(stick_x[1], stick_y[1], 20, c_lime, c_lime, false);
draw_set_alpha(1);

//draw_sprite(sprLeft,0,gui_x[0], gui_y[0]);
//draw_sprite(sprRight,0,gui_x[0]+64, gui_y[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para azul
if(global.playerStats[? "PlayerBlue"])
{
    self.cor = Cor.Blue;
    sprite_index = TrocaSpritePlayer();
     PlaySound(sndColorShift,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para verde
if(global.playerStats[? "PlayerGreen"])
{
    self.cor = Cor.Green;
    sprite_index = TrocaSpritePlayer();
     PlaySound(sndColorShift,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para vermelho
if(global.playerStats[? "PlayerRed"])
{
    self.cor = Cor.Red;
    sprite_index = TrocaSpritePlayer();
    PlaySound(sndColorShift,false)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
