<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPlayerIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPlayerIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variáveis do player
cor = Cor.White;
playerGravity = 0.75;
horizontalSpeed = 0;
verticalSpeed = 0;
//jumpSpeed e jumpSpeedPadrao devem ser sempre os mesmos
//jumpSpeed altera-se quando utiliza propulsores, voltando
//eventualmente ao jumpSpeedPadrao
jumpSpeed = 15;
jumpSpeedPadrao = 15;
//variáveis que permitem que player siga moving barriers
//quando estiver acima das mesmas
hspCarry = 0;
verCarry = 0;

/* variáveis de estado do player (para troca de sprites) */
isJumping = false;
isEndJump = false;
//1 - direita -1 - esquerda 0 - não movimenta-se
move = 0;
moveSpeed = 8;
isFalling = false;
//controle de inércia
acelerando = true;
inercia = 0;
playerVivo = true;
playerDirection = Direction.Right;
playerVivo = true;
/* variáveis de estado do player (para troca de sprites) */

/* PLATAFORMAS */
//esta acima de uma plataforma
////isOnBarrier = false;
//colidiu horizontalmente com uma plataforma
//////colideBarrier = false;
/* PLATAFORMAS */
//distancia do player da view (padrao - meio da tela)
/////distanciaView = 2;
///considerar

//view acompanha player
viewFollows = false;
viewX = 0;
viewY = 0;

//está em portal e ignora colisoes
isInPortal = false;

// alarme até morte do player
alarmPlayerDeath = room_speed;
image_speed = 1;
playerDirection = Direction.Right;
TrocaSpritePlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recomeça nível ou checkpoint, "matando" player, mas não destruímos a instância
playerVivo = true;
if (instance_exists(objRoom))
{
    if (objRoom.checkpointX != 0 &amp;&amp; objRoom.checkpointY != 0)
    {
            x = objRoom.checkpointX;
            y = objRoom.checkpointY;
    }
    else
        room_restart();
}
else
    room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define velocidade e colisões com paredes
if (global.pause)
{
    image_index = 0;
    exit;
}
if (instance_exists(objDoorStart))
{
    if (x &gt; room_width || y &gt; room_height || x &lt; 0 || y &lt; 0)
    {
        x = objDoorStart.x;
        y = objDoorStart.y;
    }
}
// player visível apenas quando vivo
//visible = playerVivo;

if (!playerVivo)
    exit;

//pulando
if (verticalSpeed &lt; 0)
    isJumping = true;
else
    isJumping = false;
     
// Define movimentação
if(global.keyRight || global.keyLeft)
{
    moveAtual = move;
    move = global.keyRight + (global.keyLeft * -1);
    if (moveAtual != move || (moveAtual == 0 &amp;&amp; move != 0))
    {
        if (isJumping) inercia = 0;
        else inercia/=2;
        acelerando = false;
    }
    else
        acelerando = true;
}
else if (inercia &lt;= moveSpeed &amp;&amp; inercia &gt; 0)
{ 
    acelerando = false;
}
else
{
    inercia = 0;
    move = 0;
}
 
if (acelerando || isJumping)
{
    inercia+=0.396;
    if (inercia &gt; moveSpeed)
        inercia = moveSpeed;
}
else
{   
    inercia-=0.396;
    if (inercia &lt;= 0)
        inercia = 0;
}
horizontalSpeed = round(move * inercia);

// faz personagem cair gradativamente
verticalSpeedAnt = verticalSpeed;
if (verticalSpeed &lt; 100)
{
    verticalSpeed += playerGravity + 0.1;
}
if (verticalSpeed &gt; verticalSpeedAnt)
    isFalling = true;
else
    isFalling = false;
// pula mais alto se tocar em propulsor, pular normal se tocar em floor e plataformas
if (place_meeting(x, y + 1, objCollision)
 || place_meeting(x, y, objPropulsor))
{
    if (global.keyJump){
        verticalSpeed = -jumpSpeed;
        if (jumpSpeed == jumpSpeedPadrao)
            PlaySound(sndJump, false, false);
        else
            PlaySound(sndBoost, false, false);
    }
    else
    {
        //som do step do player, se estiver movimentando-se
        if(move!=0)  PlaySound(sndStep1, false, true);
        if (place_meeting(x, y + 1, objCollision))
            verticalSpeed = 0;
    }
    
}
// retorna velocidade de pulo ao normal após utilizar propulsor
if !(place_meeting(x, y, objPropulsor))
    jumpSpeed = jumpSpeedPadrao;

//mantém personagem acima da barrier
var hspFinal = horizontalSpeed + hspCarry;
hspCarry = 0;

//Colisão com quinas
//if (x + s
 
/* ------------------------------------*/
/* ------------------------------------*/
/* ----------- COLISAO FLOOR ----------*/
/* ------------------------------------*/
/* ------------------------------------*/
 
//Colisão Horizontal com floor
if (place_meeting(x + hspFinal, y, objCollision))
{
    while(!place_meeting(x + sign(hspFinal), y, objCollision))
    {
        x += sign(hspFinal);
    }
    hspFinal = 0;
    horizontalSpeed = 0;
    inercia = 0;
}

//Colisão vertical com floor
if (place_meeting(x, y + verticalSpeed, objCollision))
{
    while(!place_meeting(x, y + sign(verticalSpeed), objCollision))
    {
        y += sign(verticalSpeed);
    }
    verticalSpeed = 0;
}

/* ------------------------------------*/
/* ------------------------------------*/
/* ----------- COLISAO FLOOR ----------*/
/* ------------------------------------*/
/* ------------------------------------*/



/* ------------------------------------*/
/* ------------------------------------*/
/* --------- COLISAO BARRIER ----------*/
/* ------------------------------------*/
/* ------------------------------------*/
/*
if CollisionCor(self.cor, objBarrier.cor)
{
    //colisão com barrier
    if (place_meeting(x, y + verticalSpeed, objBarrier))
    {

        var barrierXDireita = round(objBarrier.x + sprite_get_width(objBarrier.sprite_index));
        var barrierYAbaixo = round(objBarrier.y + sprite_get_height(objBarrier.sprite_index));
        var playerXDireita = round(x + (sprite_get_width(sprite_index)/2));
        var playerXEsquerda = round(x - (sprite_get_width(sprite_index)/2));
        var playerYAcima = round(y - (sprite_get_height(sprite_index)/2));
        var playerYAbaixo = round(y + (sprite_get_height(sprite_index)/2));
         // atravessa se player estiver com parte do corpo na barrier
         if (place_meeting(x, y + verticalSpeed, objBarrier))
          &amp;&amp; ((playerXDireita &gt; barrierXDireita) || (playerXEsquerda &lt; objBarrier.x) 
           || (playerYAbaixo &gt; barrierYAbaixo)   || (playerYAcima &lt; objBarrier.y) )
         {
            while(!place_meeting(x, y + sign(verticalSpeed), objBarrier))
            {
                y += sign(verticalSpeed);
            }
            verticalSpeed = 0;
         }
    }
}

    //Colisao Horizontal com barrier
    
    /*
    if (place_meeting(x + hspFinal, y, objBarrier))
    {
    if CollisionCor(self.cor, objBarrier.cor)
        {
            with(objBarrier)
            {
            var barrierXDireita = round(x + sprite_get_width(sprite_index) * scaleX);
            var barrierYAbaixo = round(y + sprite_get_height(sprite_index) * scaleY);
            var playerXDireita = round(objPlayer.x + (sprite_get_width(sprPlayerMove)/2));
            var playerXEsquerda = round(objPlayer.x - (sprite_get_width(sprPlayerMove)/2));
            var playerYAcima = round(objPlayer.y - (sprite_get_height(sprPlayerMove)/2));
            var playerYAbaixo = round(objPlayer.y + (sprite_get_height(sprPlayerMove)/2));
             // atravessa se player estiver com parte do corpo na barrier
             if (place_meeting(x, y, objPlayer) 
              &amp;&amp; ((playerXDireita &gt; barrierXDireita) || (playerXEsquerda &lt; x) 
               || (playerYAbaixo &gt; barrierYAbaixo)   || (playerYAcima &lt; y) ))
             {
             with(objPlayer){
                while(!place_meeting(x + sign(hspFinal), y, objBarrier))
        {
            x += sign(hspFinal);
        }
        }
        hspFinal = 0;
        horizontalSpeed = 0;
        inercia = 0;}
           }
    }
    }
}

/* ------------------------------------*/
/* ------------------------------------*/
/* --------- COLISAO BARRIER ----------*/
/* ------------------------------------*/
/* ------------------------------------*/

//se está seguindo path, cancela velocidade
if (path_position &gt; 0 &amp;&amp; path_position &lt; 1)
{
    verticalSpeed = 0;
    hspFinal = 0;
}

// Define movimentação caso não colida com objetos (ou não esteja em barrier vertical)
////if (!colideBarrier)
    x += hspFinal;  

//caso nao esteja acima de uma barrier
if (verCarry == 0) ///&amp;&amp; !isOnBarrier)
    y += verticalSpeed;

//view segue player
if (viewFollows)
{
   /// movimentoViewX = objPlayer.x - 128;
   /// if (movimentoViewX &gt;= 0 &amp;&amp; objPlayer.x + view_wview[1] - 128 &lt; room_width)
    if (view_xview[0] + hspFinal &gt;= 0 &amp;&amp; view_xview[0] + hspFinal &lt; room_width)
        view_xview[0] += hspFinal;
  ///  movimentoViewY = objPlayer.y - 128;
   /// if (movimentoViewY &gt;= 0 &amp;&amp; objPlayer.y + view_hview[1] - 128 &lt; room_height)
    if (view_yview[0] + verticalSpeed &gt;= 0 &amp;&amp; view_yview[0] + verticalSpeed &lt; room_height)
        view_yview[0] += verticalSpeed;
    
    viewX = view_xview[0];
    viewY = view_yview[0];
}

        
/* ------------------------------------*/
/* ------------------------------------*/
/* ----------- ANIMACAO ---------------*/
/* ------------------------------------*/
/* ------------------------------------*/

if (horizontalSpeed &gt; 0)
{
    if verticalSpeed &lt; 0
        playerDirection = Direction.JumpRight;      
    else if verticalSpeed &gt;= 0 
        playerDirection = Direction.Right;
}
else if horizontalSpeed &lt; 0
{
    if verticalSpeed &lt; 0
       playerDirection = Direction.JumpLeft;
    else if verticalSpeed &gt;= 0 
       playerDirection = Direction.Left
}
if(global.playerStats[? "PlayerRed"]&amp;&amp;global.keyRed)
{
    self.cor = Cor.Red;
}
else if(global.playerStats[? "PlayerGreen"]&amp;&amp;global.keyGreen)
{
    self.cor = Cor.Green;
}
else if(global.playerStats[? "PlayerBlue"]&amp;&amp;global.keyBlue)
{
    self.cor = Cor.Blue;
}
else if(global.playerStats[? "PlayerWhite"])
{
    self.cor = Cor.White;
}
TrocaSpritePlayer();

/* ------------------------------------*/
/* ------------------------------------*/
/* ----------- ANIMACAO ---------------*/
/* ------------------------------------*/
/* ------------------------------------*/
/*
background_x[] = -view_xview[0]/4;
background_y[] = -view_yview[0]/4;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPowerUp">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Habilita alternancia de cor
switch(other.cor)
{
    case Cor.Red   : { global.playerStats[? "PlayerRed"] = true; cor = Cor.Red;   break; }
    case Cor.Green : { global.playerStats[? "PlayerGreen"] = true; cor = Cor.Green; break; }
    case Cor.Blue  : { global.playerStats[? "PlayerBlue"]  = true; cor = Cor.Blue;  break; }
    case Cor.White : { global.playerStats[? "PlayerWhite"] = true; cor = Cor.White; break; }
}
if (cor != Cor.White)
    global.playerStats[? "PlayerWhite"] = false;
sprite_index = TrocaSpritePlayer();
with (other) instance_destroy();
PlaySound(sndPowerUp,false, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objDoorEnd">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Vai para próximo level
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSphere">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com sphere e teletransporta
if (CollisionCor(self.cor, other.cor))
{
    if (path_exists(other.path) &amp;&amp; isInPortal == false)
    {
        path_change_point(other.path, 0, other.x, other.y, path_get_speed(other.path, 0));
        path_start(other.path, path_get_speed(other.path, 0), 0, true);
        PlaySound(sndPortal,false, true);
        isInPortal = true;
    }
    else if (isInPortal == true)
    {
        //TODO:sound diferenciado
        PlaySound(sndPortal,false, true);
        isInPortal = false;
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objSpike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com spike
if (playerVivo)
    if (CollisionCor(cor, other.cor))
         CollisionDeath();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTrojanHead">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com cabeça do boss, VICTORY!
if (playerVivo)
    if (CollisionCor(cor, other.cor))
        room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objTrojan">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Colisão com boss, restarta room 
if (playerVivo)
    if (CollisionCor(cor, other.cor))
        CollisionDeath();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objCollision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//fazer algo interessante quando a cor for a mesma
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ativa variável de movimentação
global.keyLeft = 0;
global.keyRight = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ativa variável de movimentação
global.keyRight = 0;
global.keyLeft = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ativa variável de movimentação
global.keyLeft = 0;
global.keyRight = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ativa variável de movimentação
global.keyRight = 0;
global.keyLeft = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ativa variável de movimentação
global.keyJump = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reforço anti trava-tecla
//Se não há tecla pressionada, limpa todas as flags por segurança
global.keyLeft = 0;
global.keyRight = 0;
global.keyJump = 0;
global.keyRed = 0;
global.keyGreen = 0;
global.keyBlue = 0; 
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Manipula cor do player
MudaCor(cor);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para azul
if(global.playerStats[? "PlayerBlue"])
{
     global.keyBlue = true;
     global.keyRed = false;
     global.keyGreen = false;
     
    PlaySound(sndColorShift, false, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para verde
if(global.playerStats[? "PlayerGreen"])
{
     global.keyGreen = true;
     global.keyRed = false;
     global.keyBlue = false;
     
    PlaySound(sndColorShift, false, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para vermelho
if(global.playerStats[? "PlayerRed"])
{
    global.keyRed = true;
    global.keyBlue = false;
    global.keyGreen = false;
    
    PlaySound(sndColorShift, false, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keyRight = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="65">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keyLeft = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keyRight = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keyLeft = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.keyJump = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
