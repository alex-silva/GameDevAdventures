<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Player_White_Right</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inicializar player

/* Globais */
scr_Initialize_Global_Variables();
scr_Initialize_Player();
/* Globais */

/* Locais */
player_Gravity = 0.75;
horizontal_Speed = 0;
vertical_Speed = 0;
jump_Speed = 12;
move_Speed = 7;
/* Locais */

//Sprite
sprite_index = scr_Troca_Sprite();
image_speed = 0.3;

// cores habilitadas para room atual
cor_Hab = ds_map_find_value(global.map_Cor_Level,room_get_name(room));
if (cor_Hab == global.red_Green_Blue)
{
    global.player_Hab_R = true;
    global.player_Hab_G = true;
    global.player_Hab_B = true;
}
else if (cor_Hab == global.only_Red)
    global.player_Hab_R = true;
else if (cor_Hab == global.only_Blue)
    global.player_Hab_B = true;
else if (cor_Hab == global.only_Green)
    global.player_Hab_G = true;
else if (cor_Hab == global.red_Blue)
{
    global.player_Hab_R = true;
    global.player_Hab_B = true;
}
else if (cor_Hab == global.red_Green)
{
    global.player_Hab_R = true;
    global.player_Hab_G = true;
}
else if (cor_Hab == global.blue_Green)
{
    global.player_Hab_B = true;
    global.player_Hab_G = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroi Instância do player e volta ao início
instance_destroy();
instance_create(obj_Door_Start.x, obj_Door_Start.y, obj_Player);
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Define velocidade e colisões com paredes

// player visível apenas quando vivo
visible = global.player_Vivo;

if (global.player_Vivo)
{
    key_Right = keyboard_check(global.key_Right);
    key_Left = -keyboard_check(global.key_Left);
    key_Jump = keyboard_check_pressed(global.key_Jump);
    
    // Define movimentação
    move = key_Right + key_Left;
    horizontal_Speed = move * move_Speed;
    if (vertical_Speed &lt; 10) vertical_Speed += player_Gravity;
    
    // Faz personagem Pular se cor for igual a barrier, ou se estiver no solo
    if (place_meeting(x, y + 1, obj_Floor))
        vertical_Speed = key_Jump * -jump_Speed;
    else if (place_meeting(x, y + 1, obj_Barrier_Blue)
        &amp;&amp; (global.player_Cor == global.cor_Blue || global.player_Cor == global.cor_White))
            vertical_Speed = key_Jump * -jump_Speed;
    else if (place_meeting(x, y + 1, obj_Barrier_Red)
        &amp;&amp; (global.player_Cor == global.cor_Red || global.player_Cor == global.cor_White))
            vertical_Speed = key_Jump * -jump_Speed;
    else if (place_meeting(x, y + 1, obj_Barrier_Green)
        &amp;&amp; (global.player_Cor == global.cor_Green || global.player_Cor == global.cor_White))
            vertical_Speed = key_Jump * -jump_Speed;
   
    
    //Colisão Horizontal com floor
    if (place_meeting(x + horizontal_Speed, y, obj_Floor))
    {
        while(!place_meeting(x + sign(horizontal_Speed), y, obj_Floor))
        {
            x += sign(horizontal_Speed);
        }
        horizontal_Speed = 0;
    }
    
    //Colisão vertical com floor
    if (place_meeting(x, y + vertical_Speed, obj_Floor))
    {
        while(!place_meeting(x, y + sign(vertical_Speed), obj_Floor))
        {
            y += sign(vertical_Speed);
        }
        vertical_Speed = 0;
    }
    
    if (global.player_Cor == global.cor_Red || global.player_Cor == global.cor_White)
    {
        //Colisão Horizontal com barrier red
        if (place_meeting(x + horizontal_Speed, y, obj_Barrier_Red))
        {
            while(!place_meeting(x + sign(horizontal_Speed), y, obj_Barrier_Red))
            {
                x += sign(horizontal_Speed);
            }
            horizontal_Speed = 0;
        }
        //Colisão vertical com barrier red
        if (place_meeting(x, y + vertical_Speed, obj_Barrier_Red))
        {
            while(!place_meeting(x, y + sign(vertical_Speed), obj_Barrier_Red))
            {
                y += sign(vertical_Speed);
            }
            vertical_Speed = 0;
        }
    }
    else if (global.player_Cor == global.cor_Green || global.player_Cor == global.cor_White)
    {
        //Colisão Horizontal com barrier green
        if (place_meeting(x + horizontal_Speed, y, obj_Barrier_Green))
        {
            while(!place_meeting(x + sign(horizontal_Speed), y, obj_Barrier_Green))
            {
                x += sign(horizontal_Speed);
            }
            horizontal_Speed = 0;
        }
        //Colisão vertical com barrier green
        if (place_meeting(x, y + vertical_Speed, obj_Barrier_Green))
        {
            while(!place_meeting(x, y + sign(vertical_Speed), obj_Barrier_Green))
            {
                y += sign(vertical_Speed);
            }
            vertical_Speed = 0;
        }
    }
    else if (global.player_Cor == global.cor_Blue || global.player_Cor == global.cor_White)
    {
        //Colisão Horizontal com barrier blue
        if (place_meeting(x + horizontal_Speed, y, obj_Barrier_Blue))
        {
            while(!place_meeting(x + sign(horizontal_Speed), y, obj_Barrier_Blue))
            {
                x += sign(horizontal_Speed);
            }
            horizontal_Speed = 0;
        }
        //Colisão vertical com barrier blue
        if (place_meeting(x, y + vertical_Speed, obj_Barrier_Blue))
        {
            while(!place_meeting(x, y + sign(vertical_Speed), obj_Barrier_Blue))
            {
                y += sign(vertical_Speed);
            }
            vertical_Speed = 0;
        }
    }
    
    // Define movimentação caos não colida com objetos    
    x += horizontal_Speed;    
    y += vertical_Speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Anima sprite
if (horizontal_Speed &gt; 0)
{
    if vertical_Speed &lt; 0
        global.player_Direction = global.jump_Right;      
    else if vertical_Speed &gt;= 0 
        global.player_Direction = global.right;
}
else if horizontal_Speed &lt; 0
{
    if vertical_Speed &lt; 0
       global.player_Direction = global.jump_Left
    else if vertical_Speed &gt;= 0 
       global.player_Direction = global.left;
}
else image_index = 0;

sprite_index = scr_Troca_Sprite();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Powerup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Habilita alternancia de cor
switch(other.powerup_Cor)
{
    case global.cor_Red   : global.player_Hab_R = true; break;
    case global.cor_Green : global.player_Hab_G = true; break;
    case global.cor_Blue  : global.player_Hab_B = true; break;
}
with (other) instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Death">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adios muchacho
scr_Player_Death();
x -= 16;
y -= 16;
alarm[0] = global.alarm_Player_Death;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Sphere">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colide e teletransporta para sphere destino
if (global.player_Cor == other.sphere_Cor)
{
    coordenadas = string(other.x) + "," + string(other.y)
    coordenadas_Saida = string(ds_map_find_value(global.map_Spheres,coordenadas));
    if (coordenadas_Saida != "0")
    {
        x = real(string_copy(coordenadas_Saida, 1, 3));
        y = real(string_copy(coordenadas_Saida, 5, 3));
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Door_End">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Passa ao próximo level
room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Barrier">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colisão com barrier
   
// Troca de cor dentro da barrier
if ( global.player_Cor  == other.barrier_Cor
  &amp;&amp; global.player_Vivo == true )
{
    scr_Player_Death();
    alarm[0] = global.alarm_Player_Death;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colisão com spike

if ((global.player_Cor == other.spike_Cor)
  &amp;&amp; global.player_Vivo == true)
{
    scr_Player_Death();
    alarm[0] = global.alarm_Player_Death;
}
else
{
    //atravessa (pode mudar cor do sprite aqui)
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Floor">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Ajusta posição para evitar que personagem fique preso
if (global.player_Direction == global.jump_Right)
    x -= 0.1;
    y -= 0.1;
if (global.player_Direction == global.jump_Left)
    x += 0.1;
    y -= 0.1;
    
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para azul
if(global.player_Hab_B)
{
    global.player_Cor = global.cor_Blue;
    sprite_index = scr_Troca_Sprite();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para verde
if(global.player_Hab_G)
{
    global.player_Cor = global.cor_Green;
    sprite_index = scr_Troca_Sprite();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda cor para vermelho
if(global.player_Hab_R)
{
    global.player_Cor = global.cor_Red;
    sprite_index = scr_Troca_Sprite();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
