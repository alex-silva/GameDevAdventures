<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBarrierGreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCollision</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define variáveis de movimentação
sprite_index = -1;
barrierSprite = sprBarrierRed;
cor = Cor.White;

//direcao e sentido (1 - adiante 2 - atrás)
direcao = Direction.Horizontal;
sentido = 1;

moveSpeed = 3;
horizontalSpeed = 0;
verticalSpeed = 0;

//distancia a se percorrer
distancia = room_width;
distanciaPercorrida = 0;

//escala
scaleX = 1;
scaleY = 1;

//carregando player verticalmente
isCarryingPlayer = false;
//pulando (para barreiras verticais)
isJumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimenta barrier
if (global.pause) exit;
mask_index = barrierSprite;

horizontalSpeed = sentido * moveSpeed;
distanciaPercorrida += sign(x - distanciaPercorrida);

//se percorreu distancia, retorna na direção oposta
if (distanciaPercorrida &gt;= distancia)
{
    horizontalSpeed = 0;
    sentido *= -1;
    distanciaPercorrida = 0;
}
//colisão horizontal com floor
else if (place_meeting(x + horizontalSpeed, y, objCollision))
{
    while(!place_meeting(x+sign(horizontalSpeed),y,objCollision))
        x+=sign(horizontalSpeed);
    horizontalSpeed = 0;
    sentido *= -1;
    distanciaPercorrida = 0;
}
//colisão vertical com floor
else if (place_meeting(x, y + horizontalSpeed, objCollision))
{
    while(!place_meeting(x, y + sign(horizontalSpeed),objCollision))
        y+=sign(horizontalSpeed);
    horizontalSpeed = 0;
    sentido *= -1;
    distanciaPercorrida = 0;
}

if (instance_exists(objPlayer))
{
    if (CollisionCor(self.cor, objPlayer.cor))
    {
        //barrier fica solida
        mask_index = barrierSprite;

        if (direcao == Direction.Vertical)
        {
            //mantem personagem acima da barrier
            if (isCarryingPlayer &amp;&amp; !isJumping)
                objPlayer.y = y - (sprite_get_height(sprPlayerBlueMove)/2)+6;
            //desativa pulo caso sai da barrier
            else if ((isJumping) &amp;&amp; !place_meeting(x,y-6,objPlayer))
                isJumping = false;
        }
        /* atravessa se player estiver com parte do corpo na barrier */
        var barrierXDireita = round(x + sprite_get_width(barrierSprite) * scaleX);
        var barrierYAbaixo = round(y + sprite_get_height(barrierSprite) * scaleY);
        var playerXDireita = round(objPlayer.x + (sprite_get_width(sprPlayerBlueMove)/2));
        var playerXEsquerda = round(objPlayer.x - (sprite_get_width(sprPlayerBlueMove)/2));
        var playerYAcima = round(objPlayer.y - (sprite_get_height(sprPlayerBlueMove)/2));
        var playerYAbaixo = round(objPlayer.y + (sprite_get_height(sprPlayerBlueMove)/2));
        
         if (place_meeting(x, y, objPlayer) &amp;&amp; !isCarryingPlayer
          &amp;&amp; ((playerXDireita &gt; barrierXDireita) || (playerXEsquerda &lt; x) 
           || (playerYAbaixo &gt; barrierYAbaixo)   || (playerYAcima &lt; y) ))
         {
            mask_index = -1;
         }
        /* atravessa se player estiver com parte do corpo na barrier */        
         
        // se o player está acima da barrier atual
        if (place_meeting(x,y-6,objPlayer) &amp;&amp; !isJumping)
        {
            //pulo
       //     if (global.keyJump || KEY_JUMP)
         //   {
           //     objPlayer.y -= objPlayer.jumpSpeed;  
             //   isJumping = true;
               // isCarryingPlayer = false;
         //   }
            //mantém personagem acima da barrier
            if (direcao == Direction.Horizontal)
                objPlayer.hspCarry = horizontalSpeed;
            else if (direcao = Direction.Vertical &amp;&amp; !isJumping)
            {
                isCarryingPlayer = true;
                objPlayer.y = y - (sprite_get_height(sprPlayerBlueMove)/2)+6;
                objPlayer.verCarry = 1;
            }
        }
        else
        {
            // abaixo da barrier, desativa variaveis verticais
            objPlayer.verCarry = 0;
            isCarryingPlayer = false;
        }
    }
    else
    {
        
        //atravessa barrier se for de cor oposta
        isCarryingPlayer = false;
        mask_index = -1;
    }      
}

//anda horizontal ou vertical
if (direcao == Direction.Horizontal)
    x+=horizontalSpeed;
else
    y+=horizontalSpeed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apenas desenha o sprite, sem máscaras de colisão
draw_sprite_ext(barrierSprite, 0, x, y, scaleX, scaleY, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
