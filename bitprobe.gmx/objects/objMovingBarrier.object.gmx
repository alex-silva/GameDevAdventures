<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBarrierGreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objFloor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define variáveis de movimentação
sprite_index = -1;
barrierSprite = sprBarrierRed;
cor = Cor.White;

direcao = -1;
moveSpeed = 3;
horizontalSpeed = 0;
verticalSpeed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimenta barrier
mask_index = barrierSprite;

horizontalSpeed = direcao * moveSpeed;

if (place_meeting(x + horizontalSpeed, y, objFloor))
{
    while(!place_meeting(x+sign(horizontalSpeed),y,objFloor))
        x+=sign(horizontalSpeed);
    horizontalSpeed = 0;
    direcao *= -1;
}
x+=horizontalSpeed;
if (instance_exists(objPlayer))
{
    // se player está dentro da barrier
    //if ((objPlayer.x - objPlayer.sprite_width/2) &gt; x)
 //       if (scrCollisionCor(self.cor, objPlayer.cor))
   //         sprite_index = barrierSprite;
     //   else
     //       mask_index = -1;
    // se o player está a esquerda da barrier
  /*  if (round(objPlayer.x + (objPlayer.sprite_width/2)) &lt; x)
    {
      //  if (scrCollisionCor(self.cor, objPlayer.cor))
        //    sprite_index = barrierSprite;
       // else
            mask_index = -1;
    }
    // se o player está a direita da barrier
    else if (round(objPlayer.x + (objPlayer.sprite_width/2)) &gt; x)
    {
     //   if (scrCollisionCor(self.cor, objPlayer.cor))
       //     sprite_index = barrierSprite;
       // else
            mask_index = -1;
    }*/
    // se o player está abaixo da barrier
    if (round(objPlayer.y + (objPlayer.sprite_height/2)) &gt; y)
    {
        if (scrCollisionCor(self.cor, objPlayer.cor))
            mask_index = barrierSprite;
        else
            mask_index = -1;
    }
    // se o player está acima da barrier
    else//if (round(objPlayer.y + (objPlayer.sprite_height/2)) &lt;= y)
    {
        if (scrCollisionCor(self.cor, objPlayer.cor))
        {
            //mantém personagem acima da barrier
            if (place_meeting(x,y-1,objPlayer))
            {
                objPlayer.hspCarry = horizontalSpeed;
            }
            mask_index = barrierSprite;
        }
        else
            mask_index = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apenas desenha o sprite, sem máscaras de colisão
draw_sprite(barrierSprite, 0, x, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
