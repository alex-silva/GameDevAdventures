<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBarrierGreen</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objFloor</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define variáveis de movimentação
sprite_index = -1;
barrierSprite = sprBarrierRed;
cor = Cor.White;

//direcao e sentido (1-horizontal, -1-vertical)
direcao = 1;
sentido = 1;

moveSpeed = 3;
horizontalSpeed = 0;
verticalSpeed = 0;

//distancia a se percorrer
distancia = room_width;
distanciaPercorrida = 0;

//escala e rotação
scaleX = 1;
scaleY = 1;
rot = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (global.pause) exit;
mask_index = barrierSprite;

horizontalSpeed = direcao * moveSpeed;
distanciaPercorrida += sign(x - distanciaPercorrida);

//se percorreu distancia, retorna na direção oposta
if (distanciaPercorrida &gt;= distancia)
{
    horizontalSpeed = 0;
    direcao *= -1;
    distanciaPercorrida = 0;
}
//colisão horizontal com floor
else if (place_meeting(x + horizontalSpeed, y, objFloor))
{
    while(!place_meeting(x+sign(horizontalSpeed),y,objFloor))
        x+=sign(horizontalSpeed);
    horizontalSpeed = 0;
    direcao *= -1;
    distanciaPercorrida = 0;
}
//colisão vertical com floor
else if (place_meeting(x, y + horizontalSpeed, objFloor))
{
    while(!place_meeting(x, y + sign(horizontalSpeed),objFloor))
        y+=sign(horizontalSpeed);
    horizontalSpeed = 0;
    direcao *= -1;
    distanciaPercorrida = 0;
}

//anda horizontal ou vertical
if (sentido == 1)
    x+=horizontalSpeed;
else
    y+=horizontalSpeed;
    
if (instance_exists(objPlayer))
{
    if (round(objPlayer.y - (sprite_get_height(sprPlayerBlueMove)/2)) &gt; round(y + sprite_get_height(barrierSprite) * scaleY))
    {
        //apenas colide se estiver totalmente fora da barrier
        if (scrCollisionCor(self.cor, objPlayer.cor))
            mask_index = barrierSprite;
        else
            mask_index = -1;
    }
    // se o player está acima da barrier
    else if (round(objPlayer.y + (sprite_get_height(sprPlayerBlueMove)/2)) &lt;= y)
    {
        if (scrCollisionCor(self.cor, objPlayer.cor))
        {
            //mantém personagem acima da barrier
            if (place_meeting(x,y-1,objPlayer))
            {
                if (sentido == 1)
                    objPlayer.hspCarry = horizontalSpeed;
                else
                    objPlayer.verCarry = horizontalSpeed;
            }
            mask_index = barrierSprite;
        }
        else
            mask_index = -1;
    }
    else
        mask_index = -1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apenas desenha o sprite, sem máscaras de colisão
draw_sprite_ext(barrierSprite, 0, x, y, scaleX, scaleY, rot, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
