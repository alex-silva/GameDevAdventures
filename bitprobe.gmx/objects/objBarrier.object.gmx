<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBarrier</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objCollision</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define cor
cor = Cor.White;
sprite_index = - 1;
//player esta acima da plataforma, ou colidiu
/////carregaPlayer = false;
//player pulou acima da plataforma
/////isJumping = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ativa ou desativa máscara de colisão de acordo com cor
if (global.pause) exit;

if (instance_exists(objPlayer))
{
    if CollisionCor(self.cor, objPlayer.cor)
    {
        mask_index = sprBarrier;
        var barrierXDireita = round(x + sprite_get_width(sprBarrier) * image_xscale);
        var barrierYAbaixo = round(y + sprite_get_height(sprBarrier) * image_yscale);
        var playerXDireita = round(objPlayer.x + (sprite_get_width(sprPlayerMove)/2));
        var playerXEsquerda = round(objPlayer.x - (sprite_get_width(sprPlayerMove)/2));
        var playerYAcima = round(objPlayer.y - (sprite_get_height(sprPlayerMove)/2));
        var playerYAbaixo = round(objPlayer.y + (sprite_get_height(sprPlayerMove)/2));
         // atravessa se player estiver com parte do corpo na barrier
         if (place_meeting(x, y, objPlayer) 
          &amp;&amp; ((playerXDireita &gt; barrierXDireita) || (playerXEsquerda &lt; x) 
           || (playerYAbaixo &gt; barrierYAbaixo)   || (playerYAcima &lt; y) ))
         
            mask_index = -1;
         
    }
    else
        mask_index = -1;
}


//colide
/*if CollisionCor(self.cor, objPlayer.cor)
{
    ////verificar quinas!
    ////na horizontal se mudar de cor enquanto colidir, nao prossegue
    ////pula mais alto se for da msm cor da barrier(abaixo da mesma)

    //se player estiver com parte do corpo para fora, atravessa
/*    var barrierXDireita = round(x + sprite_get_width(sprite_index));
    var barrierYAbaixo = round(y + sprite_get_height(sprite_index));
    var playerXDireita = round(objPlayer.x + (sprite_get_width(objPlayer.sprite_index)/2));
    var playerXEsquerda = round(objPlayer.x - (sprite_get_width(objPlayer.sprite_index)/2));
    var playerYAcima = round(objPlayer.y - (sprite_get_height(objPlayer.sprite_index)/2));
    var playerYAbaixo = round(objPlayer.y + (sprite_get_height(objPlayer.sprite_index)/2));*/
/*    
      var barrierXDireita = round(x + sprite_width);
    var barrierYAbaixo = round(y + sprite_height);
    var playerXDireita = round(objPlayer.x + (sprite_get_width(objPlayer.sprite_index)/2));
    var playerXEsquerda = round(objPlayer.x - (sprite_get_width(objPlayer.sprite_index)/2));
    var playerYAcima = round(objPlayer.y - (sprite_get_height(objPlayer.sprite_index)/2));
    var playerYAbaixo = round(objPlayer.y + (sprite_get_height(objPlayer.sprite_index)/2));
     // atravessa se player estiver com parte do corpo na barrier
     if (place_meeting(x, y, objPlayer) 
      &amp;&amp; ((playerXDireita &gt; barrierXDireita) || (playerXEsquerda &lt; x) 
       || (playerYAbaixo &gt; barrierYAbaixo)   || (playerYAcima &lt; y) ))
    {
        if (carregaPlayer == true)
        {
            objPlayer.isOnBarrier = false;
            isJumping = false;
        }
        carregaPlayer = false;
        exit;
    }
    
    /*colisão vertical com player (acima)*/
  /*  if (place_meeting(x, y - objPlayer.verticalSpeed, objPlayer))
    {
        while(!place_meeting(x, y - sign(objPlayer.verticalSpeed), objPlayer))
            objPlayer.y += sign(objPlayer.verticalSpeed);
        objPlayer.isOnBarrier = true;
        objPlayer.verticalSpeed = 0;
        carregaPlayer = true;
        if (global.keyJump){
            objPlayer.verticalSpeed = -objPlayer.jumpSpeed;
            isJumping = true;
            carregaPlayer = false;
            objPlayer.isOnBarrier = false;
            PlaySound(sndJump, false, false);
            }
        else if (objPlayer.move != 0 )
            PlaySound(sndStep1, false, true);
        exit;
            
    }
    /*colisão vertical com player (acima)*/
    
    /* colisão vertical com player (por baixo)*/
 /*   if (place_meeting(x, y + sign(objPlayer.verticalSpeed), objPlayer))
    {
    show_debug_message("baixo");
        while(!place_meeting(x, y + sign(objPlayer.verticalSpeed), objPlayer))
        {
        show_debug_message("barrier " + string(y)); 
                show_debug_message("player " + string(objPlayer.y));
            objPlayer.y -= sign(objPlayer.verticalSpeed);
            }
        objPlayer.verticalSpeed = 0;
        exit;
    }
    /* colisão vertical com player (por baixo)*/
    
    //////testar
    
    
    
    /* colisão horizontal com player*/
 /*   if (place_meeting(x - objPlayer.horizontalSpeed, y, objPlayer))
    {
        while(!place_meeting(x - sign(objPlayer.horizontalSpeed), y, objPlayer))
            objPlayer.x += sign(objPlayer.horizontalSpeed);
        objPlayer.colideBarrier = true;
        objPlayer.horizontalSpeed = 0;
        carregaPlayer = true;
        exit;
    }
    /* colisão horizontal com player*/

    //player não colide mais com plataforma ou pulou (se estiver acima)
  /*  if (carregaPlayer == true || isJumping == true)
    {
        show_debug_message("saiu");
        carregaPlayer = false;
        objPlayer.isOnBarrier = false;
        objPlayer.colideBarrier = false;
        if !(place_meeting(x, y - objPlayer.verticalSpeed, objPlayer) &amp;&amp; isJumping)
            isJumping = false;
    }
   
   
}
//atravessa
else
{
    if (carregaPlayer == true)
    {
        objPlayer.isOnBarrier = false;
        isJumping = false;
    }
    carregaPlayer = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apenas desenha o sprite, sem máscaras de colisão, muda cor
///MudaCor(cor);

var hue = 255;
switch (cor)
{
    case Cor.Red   : hue = 0; break;
    case Cor.Green : hue = 80; break;
    case Cor.Blue  : hue = 160; break; 
    case Cor.White : hue = 255; break;
}
if( shader_is_compiled(shaTrocaCor) )
{    
    shader_set(shaTrocaCor);
    shader_set_uniform_f(shader_get_uniform(shaTrocaCor,"hue"),hue);
    if (instance_exists(objPlayer))
    {
        if (objPlayer.cor != cor)
            shader_set_uniform_f(shader_get_uniform(shaTrocaCor,"light"),0.5);
                else
            shader_set_uniform_f(shader_get_uniform(shaTrocaCor,"light"),1.0);
    }
    draw_sprite_ext(sprBarrier, 0, x, y, image_xscale, image_yscale,image_angle, c_white, 1);

    shader_reset();
}else{
    show_debug_message("shaTrocaCor nao compilou");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
