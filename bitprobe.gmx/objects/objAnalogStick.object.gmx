<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_x[0] = 150;
gui_y[0] = (display_get_gui_height() - 150); 
gui_x[1] = (display_get_gui_width() - 150); 
gui_y[1] = (display_get_gui_height() - 150); 
stick_x[0] = gui_x[0]; 
stick_y[0] = gui_y[0]; 
stick_x[1] = gui_x[1]; 
stick_y[1] = gui_y[1]; 
st_pressed[0] = -1; 
st_pressed[1] = -1; 
st_radius = 80; 
vdir = 0;
stick_offset=40;
stick_direction = point_direction(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
stick_distance = point_distance(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Analog Stick
stick_x[0] = gui_x[0];
stick_y[0] = gui_y[0];
stick_x[1] = gui_x[1];
stick_y[1] = gui_y[1];
if st_pressed[0] = -1
   {
   for (i = 0; i &lt; 5; i++;)
      {
      if device_mouse_check_button(i, mb_left)
         {
         var tx, ty;
         tx = scr_mouse_gui_x(device_mouse_raw_x(i));
         ty = scr_mouse_gui_y(device_mouse_raw_y(i));
         if point_distance(tx, ty, gui_x[0], gui_y[0]) &lt; st_radius+300
            {
            if st_pressed[1] != i                {
               st_pressed[0] = i;
               break;
               }            
               }
         }
      }
   }
if device_mouse_check_button(st_pressed[0], mb_left)
   {
   var spd, vdist, mx, my;
   mx = scr_mouse_gui_x(device_mouse_raw_x(st_pressed[0]));
   my = scr_mouse_gui_y(device_mouse_raw_y(st_pressed[0]));

   vdist = min(st_radius, point_distance(mx, my, gui_x[0], gui_y[0]));
   vdir = point_direction(gui_x[0], gui_y[0], mx, my);


   //spd = min(b_spd, vdist / 10);
   //h_spd = lengthdir_x(spd, vdir);
   //v_spd = lengthdir_y(spd, vdir);

   stick_x[0] = gui_x[0] + lengthdir_x(vdist, vdir);
   stick_y[0] = gui_y[0] + lengthdir_y(vdist, vdir);
   }
else st_pressed[0] = -1

//stick de mudança de cor
if st_pressed[1] = -1
   {
   for (i = 0; i &lt; 5; i++;)
      {
      if device_mouse_check_button(i, mb_left)
         {
         var tx, ty;
         tx = scr_mouse_gui_x(device_mouse_raw_x(i));
         ty = scr_mouse_gui_y(device_mouse_raw_y(i));
         if point_distance(tx, ty, gui_x[1], gui_y[1]) &lt; st_radius +300
            {
            if st_pressed[0] != i                {
               st_pressed[1] = i;
               break;
               }             }
         }
      }
   }
if device_mouse_check_button(st_pressed[1], mb_left)
   {
   var spd, vdist, mx, my;
   mx = scr_mouse_gui_x(device_mouse_raw_x(st_pressed[1]));
   my = scr_mouse_gui_y(device_mouse_raw_y(st_pressed[1]));

   vdist = min(st_radius, point_distance(mx, my, gui_x[1], gui_y[1]));
   vdir = point_direction(gui_x[1], gui_y[1], mx, my);


   //spd = min(b_spd, vdist / 10);
   //h_spd = lengthdir_x(spd, vdir);
   //v_spd = lengthdir_y(spd, vdir);

   stick_x[1] = gui_x[1] + lengthdir_x(vdist, vdir);
   stick_y[1] = gui_y[1] + lengthdir_y(vdist, vdir);
   }
else st_pressed[1] = -1
   
// Define movimentação por stick
stick_direction = point_direction(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);
stick_distance = point_distance(gui_x[0], gui_y[0], stick_x[0], stick_y[0]);

if (stick_distance &gt; stick_offset){
    //Movimentação
    if (stick_direction &gt;= 300 ||  stick_direction &lt;= 60)
    {
        global.keyLeft = 0;
        global.keyRight = 1;
    }
    else if (stick_direction &gt;= 120 &amp;&amp;  stick_direction &lt;= 240)
    {
        global.keyLeft = 1;
        global.keyRight = 0;
    }
    else
    {
        global.keyLeft = 0;
        global.keyRight = 0;
    }
    //Jump
    if (stick_direction &gt; 20 &amp;&amp;  stick_direction &lt; 160)
    {
        global.keyJump = 1;
    }
    else
    {
        global.keyJump = 0;
    }
}
else
{
    global.keyLeft = 0;
    global.keyRight = 0;
    global.keyJump = 0;
}

//verifica se trocou de cor pelo stick
stick_direction = point_direction(gui_x[1], gui_y[1], stick_x[1], stick_y[1]);
stick_distance = point_distance(gui_x[1], gui_y[1], stick_x[1], stick_y[1]);
if (stick_distance &gt; stick_offset){
    if (stick_direction &gt; 150 &amp;&amp;  stick_direction &lt; 270)
    {
        global.keyRed = 1;
        global.keyGreen = 0;
        global.keyBlue = 0; 
    }
    else if (stick_direction &lt; 30 ||  stick_direction &gt;= 270)
    {
        global.keyRed = 0;
        global.keyGreen = 0;
        global.keyBlue = 1; 
    }
    else if (stick_direction &gt;= 30 &amp;&amp;  stick_direction &lt;= 150)
    {
        global.keyRed = 0;
        global.keyGreen = 1;
        global.keyBlue = 0;  
    }
    PlaySound(sndColorShift, false, false);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.75);
draw_circle_color(gui_x[0], gui_y[0], st_radius, c_lime, c_lime, true);
draw_circle_color(stick_x[0], stick_y[0], 20, c_lime, c_lime, true);
draw_circle_color(gui_x[1], gui_y[1], st_radius, c_lime, c_lime, true);
draw_circle_color(stick_x[1], stick_y[1], 20, c_lime, c_lime, true);
draw_set_alpha(0.25);
draw_circle_color(gui_x[0], gui_y[0], st_radius, c_lime, c_lime, false);
draw_circle_color(stick_x[0], stick_y[0], 20, c_lime, c_lime, false);
draw_circle_color(gui_x[1], gui_y[1], st_radius, c_lime, c_lime, false);
draw_circle_color(stick_x[1], stick_y[1], 20, c_lime, c_lime, false);
draw_set_alpha(1);

//draw_sprite(sprLeft,0,gui_x[0], gui_y[0]);
//draw_sprite(sprRight,0,gui_x[0]+64, gui_y[0]);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
