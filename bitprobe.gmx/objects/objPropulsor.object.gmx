<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprPropulsorIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>sprPropulsorIdle</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Velocidade para jump do player, e cor
spd  = 24;
//Retira máscaras de colisão, define sprite e cor
sprite_index = -1;
propulsorSprite = sprPropulsorIdle;
cor = Cor.White;
//Parâmetros para drawing: escala e rotação
scaleX = 1;
scaleY = 1;
rot = 0;
//Variável de controle de colisão com o player
isOn = false;
//Velocidade de animação
animSpeed = 0.3;
sprite_index = sprPropulsorIdle;
image_speed = 0;
isCharged = false;
isCharging = false;
isDischarging = false;

// draw_sprite_ext(propulsorSprite, 0, x, y, scaleX, scaleY, rot, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Muda velocidade de pulo do player se colidir com player, se cor igual

if (instance_exists(objPlayer))
{
    // se o player está acima ou abaixo da barrier
   /* if (round(objPlayer.y + (objPlayer.sprite_height/2)) &gt; y
    || (round(objPlayer.y + (objPlayer.sprite_height/2)) &lt;= y))
    {
        if (CollisionCor(self.cor, objPlayer.cor))
            mask_index = propulsorSprite;
        else
            mask_index = -1;

    }
    else
    {

       mask_index = -1;
    }
*/
    if (CollisionCor(self.cor, objPlayer.cor)
    &amp;&amp; (place_meeting(x, y - 16, objPlayer)))
    {

        objPlayer.jumpSpeed = spd;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Controle de Animação
if(place_meeting(x, y - 16, objPlayer)) isOn = true;
else isOn = false;
if (isOn == true)
{
    if(isCharged == false &amp;&amp; isCharging = false)
    {
        isCharged = false;
        isDischarging = false;
        image_speed = 0;
        image_index = 0;
        sprite_index = sprPropulsorCharge;
        //spritePropulsor = sprPropulsorCharge;
        image_speed = animSpeed;
        isCharging = true;

    }
    if(image_index &gt;= 9 &amp;&amp; isCharged == false)
    {
         isDischarging = false;
         isCharging = false;
         isCharged = true;
         image_speed = 0;
         image_index = 0;
         sprite_index = sprPropulsorCharged;
        // spritePropulsor = sprPropulsorCharged;
         image_speed = animSpeed;

    }
}
else
{
    if((isCharged == true || isCharging == true) &amp;&amp; isDischarging == false)
    {

        image_speed = 0;
        if(isCharging == true) image_index = 9 - image_index;
        else image_index = 0;
        sprite_index = sprPropulsorDischarge;
      //spritePropulsor = sprPropulsorDischarge;
        image_speed = animSpeed;
        isDischarging = true;
        isCharged = false;
         //if(isOn == true)
    }
    if(image_index &gt;8 &amp;&amp; isDischarging == true)
    {
        isCharged = false;
        isCharging = false;
        isDischarging = false;
        image_speed = 0;
        image_index = 0;
        sprite_index = sprPropulsorIdle;
     // spritePropulsor = sprPropulsorIdle;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
