<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprSphere</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>objSphere</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Define variáveis de movimentação
event_inherited();
direcao = Direction.Right;
moveSpeed = 3;
horizontalSpeed = 0;
//1 - adiante -1 - para atrás
sentido = 1;

//distancia a se percorrer
distancia = room_width;
distanciaPercorrida = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movimenta sphere, define path

//se pausado ou no meio de path, fica estativo
if (global.pause) exit;

horizontalSpeed = sentido * moveSpeed;
if (direcao == Direction.Left || direcao == Direction.Right)
    distanciaPercorrida += sign(x - distanciaPercorrida);
else
    distanciaPercorrida += sign(y - distanciaPercorrida);

//se percorreu distancia, retorna na direção oposta
if (distanciaPercorrida &gt;= distancia)
{
    horizontalSpeed = 0;
    sentido *= -1;
    distanciaPercorrida = 0;
}
//colisão horizontal com floor
else if (place_meeting(x + horizontalSpeed, y, objCollision))
{
    while(!place_meeting(x+sign(horizontalSpeed),y,objCollision))
        x+=sign(horizontalSpeed);
    sentido *= -1;
    distanciaPercorrida = 0;
    horizontalSpeed = 0;
}
//colisão vertical com floor
else if (place_meeting(x, y + horizontalSpeed, objCollision))
{
    while(!place_meeting(x, y + sign(horizontalSpeed),objCollision))
        y+=sign(horizontalSpeed);
    sentido *= -1;
    distanciaPercorrida = 0;
    horizontalSpeed = 0;
}
//muda path final de acordo com posição
if (instance_exists(objPlayer) &amp;&amp; path_exists(path))
{
    if (!isOrigin)
        path_change_point(path, path_get_number(path) - 1, x, y, speedPath);
}

if (direcao == Direction.Up || direcao == Direction.Down)
    y+=horizontalSpeed;
else
    x+=horizontalSpeed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>128,128</point>
  </PhysicsShapePoints>
</object>
